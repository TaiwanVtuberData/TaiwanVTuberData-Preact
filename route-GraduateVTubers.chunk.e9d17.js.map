{"version":3,"sources":["webpack:///./tableTypes/GraduateDateColumn.tsx","webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./utils/transform/GraduateTransform.ts","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./utils/FilterModelHelper.ts","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./style/IsTodayRowStyles.ts","webpack:///./components/FilterWindow/style.module.css","webpack:///./components/FilterWindow/index.tsx","webpack:///./utils/StringUtils.ts","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./routes/GraduateVTubers/index.tsx","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["GraduateDateColumn","name","id","selector","row","graduateDate","YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","cell","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","VTuberGraduateToDisplay","e","todayDate","VTuberBasicToDisplay","isToday","ProfileImagePopup","ProfileImage","clickBehavior","YouTubeTwitchCountColumn","NationalityColumn","nationality","filterFunction","targetModel","filterModel","Object","entries","map","entry","target","filter","toLowerCase","includes","some","SearchBar","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","IsTodayRowStyle","FilterWindow","useState","isOpened","setIsOpened","setFilter","createSearchBar","key","keyTyped","handleOnFilterChange","nullableString","trimmed","trim","trimOrNullOnEmpty","handleOnChange","fieldPlaceHolderMappings","get","fields","keys","closeSearchText","openSearchText","ToolTip","children","width","fontSize","text","tag","count","a","b","PopularVideoColumn","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower","GraduateVTubersPage","document","title","dictionary","header","graduateVTubers","sortable","sortFunction","setData","setFilterModel","filteredData","searchBarComponent","useMemo","Map","table","searchByDisplayName","searchByYouTubeId","searchByTwitchId","searchByGroup","searchByNationality","searchByDate","tableStyle","searchBarGroup","openSearch","closeSearch","pending","setPending","getVTubers","getISODateString","Date","Api","then","res","VTubers","sort","localeCompare","useEffect","concat","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","QuestionMarkToolTip"],"mappings":"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","file":"route-GraduateVTubers.chunk.e9d17.js","sourcesContent":["import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface GraduateDateColumnRowData {\n  graduateDate: string;\n}\n\nexport const GraduateDateColumn = <\n  RowData extends GraduateDateColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.graduateDate\">Graduation Date</Text>,\n    selector: (row: { graduateDate: string }): string => row.graduateDate,\n  };\n};\n","import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import { VTuberGraduateData } from '../../types/ApiData/VTuberGraduateData';\nimport { VTuberGraduateDisplayData } from '../../types/TableDisplayData/VTuberGraduateDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const VTuberGraduateToDisplay = (\n  e: VTuberGraduateData,\n  todayDate: string\n): VTuberGraduateDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  graduateDate: e.graduateDate,\n  isToday: e.graduateDate === todayDate,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","export function filterFunction<\n  TargetType extends object,\n  FilterModel extends object\n>(targetModel: TargetType, filterModel: FilterModel): boolean {\n  const result = Object.entries(filterModel).map((entry) => {\n    const keyTyped = entry[0] as keyof typeof targetModel;\n    const target = targetModel[keyTyped] as string | undefined | null;\n\n    const filter = entry[1] as string | null;\n\n    // if there is no filter applied\n    if (filter === null) {\n      return true;\n    }\n\n    // if target doesn't exist\n    if (target === null || target === undefined || target === '') {\n      return false;\n    }\n\n    return target.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const someFilterNotMatch = result.some((e) => e === false);\n\n  return !someFilterNotMatch;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","const IsTodayRowStyle = [\n  {\n    when: (row: { isToday: boolean }): boolean => row.isToday,\n    style: {\n      color: 'mediumblue',\n    },\n  },\n];\n\nexport default IsTodayRowStyle;\n","// extracted by mini-css-extract-plugin\nexport default {\"floating\":\"floating__uhu4Y\",\"floatingHidden\":\"floatingHidden__mvSUQ\",\"floatingShowing\":\"floatingShowing__nwzm5\"};","import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { trimOrNullOnEmpty } from '../../utils/StringUtils';\nimport SearchBar from '../SearchBar';\nimport style from './style.module.css';\n\nexport interface FilterWindowProps<FilterModel extends object> {\n  filterModel: FilterModel;\n  fieldPlaceHolderMappings: Map<string, string>;\n  openSearchText: string;\n  closeSearchText: string;\n  onChange?: (e: FilterModel) => void;\n}\n\nfunction FilterWindow<FilterModel extends object>(\n  props: FilterWindowProps<FilterModel>\n): JSX.Element {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [filter, setFilter] = useState<FilterModel>(props.filterModel);\n\n  function handleOnChange(e: FilterModel): void {\n    if (props.onChange != null) {\n      props.onChange(e);\n    }\n  }\n\n  const createSearchBar = (key: string): JSX.Element => {\n    {\n      const keyTyped = key as keyof typeof filter;\n\n      const handleOnFilterChange = (e: string | null): void => {\n        const nullableString: string | null = trimOrNullOnEmpty(e);\n\n        setFilter({ ...filter, [keyTyped]: nullableString });\n        handleOnChange({ ...filter, [keyTyped]: nullableString });\n      };\n\n      return (\n        <SearchBar\n          key={key}\n          placeholderText={props.fieldPlaceHolderMappings.get(\n            keyTyped as string\n          )}\n          filterText={filter[keyTyped] as string | null}\n          onFilter={(e: any): void => handleOnFilterChange(e.target.value)}\n          onClear={(): void => handleOnFilterChange(null)}\n        />\n      );\n    }\n  };\n\n  const fields: Array<JSX.Element> = Object.keys(props.filterModel).map((key) =>\n    createSearchBar(key)\n  );\n\n  const ToggleButton = (): JSX.Element => (\n    <input\n      type=\"button\"\n      value={isOpened === true ? props.closeSearchText : props.openSearchText}\n      onClick={(): void => setIsOpened(!isOpened)}\n    />\n  );\n\n  const toggleFloatingClass = (): string => {\n    if (isOpened) return `${style.floating} ${style.floatingShowing}`;\n    else return `${style.floating} ${style.floatingHidden}`;\n  };\n\n  return (\n    <div>\n      <ToggleButton />\n      {isOpened === true ? (\n        <div class={toggleFloatingClass()}>{fields}</div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default FilterWindow;\n","export function trimOrNullOnEmpty(\n  value: string | null | undefined\n): string | null {\n  if (value === null || value === undefined) return null;\n\n  const trimmed = value.trim();\n\n  if (trimmed === '') return null;\n\n  return trimmed;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport IsTodayRowStyle from '../../style/IsTodayRowStyles';\nimport { GraduateDateColumn } from '../../tableTypes/GraduateDateColumn';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberGraduateDisplayData } from '../../types/TableDisplayData/VTuberGraduateDisplayData';\nimport { getISODateString } from '../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort } from '../../utils/sort/SubscriberCountSort';\nimport { VTuberGraduateToDisplay } from '../../utils/transform/GraduateTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { VTuberGraduateDisplayDataFilterModel } from '../../types/FilterType/VTuberGraduateDisplayDataFilterModel';\nimport { filterFunction } from '../../utils/FilterModelHelper';\nimport FilterWindow from '../../components/FilterWindow';\n\nexport interface GraduateVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst GraduateVTubersPage: FunctionalComponent<GraduateVTubersPageProps> = (\n  props: GraduateVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.graduateVTubers} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<VTuberGraduateDisplayData>> = [\n    {\n      ...GraduateDateColumn(),\n      sortable: true,\n    },\n    NameColumn(),\n    {\n      ...YouTubeTwitchCountColumn(),\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort,\n    },\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberGraduateDisplayData>>([]);\n  const [filterModel, setFilterModel] =\n    useState<VTuberGraduateDisplayDataFilterModel>({\n      name: null,\n      YouTubeId: null,\n      TwitchId: null,\n      group: null,\n      nationality: null,\n      graduateDate: null,\n    });\n  const filteredData = data.filter((e) => filterFunction(e, filterModel));\n\n  const searchBarComponent = useMemo(() => {\n    const handleFilterWindow = (\n      filterModel: VTuberGraduateDisplayDataFilterModel\n    ): void => {\n      setFilterModel(filterModel);\n    };\n\n    const fieldPlaceHolderMappings: Map<string, string> = new Map<\n      string,\n      string\n    >([\n      ['name', props.dictionary.table.searchByDisplayName],\n      ['YouTubeId', props.dictionary.table.searchByYouTubeId],\n      ['TwitchId', props.dictionary.table.searchByTwitchId],\n      ['group', props.dictionary.table.searchByGroup],\n      ['nationality', props.dictionary.table.searchByNationality],\n      ['graduateDate', props.dictionary.table.searchByDate],\n    ]);\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <FilterWindow\n          filterModel={filterModel}\n          fieldPlaceHolderMappings={fieldPlaceHolderMappings}\n          openSearchText={props.dictionary.text.openSearch}\n          closeSearchText={props.dictionary.text.closeSearch}\n          onChange={handleFilterWindow}\n        />\n      </div>\n    );\n  }, [filterModel, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    const todayDate: string = getISODateString(new Date(), 8);\n    await Api.getGraduateVTubers('recent').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .sort((a, b) => b.graduateDate.localeCompare(a.graduateDate))\n          .map((e) => VTuberGraduateToDisplay(e, todayDate))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.graduateVTubers\">Graduate VTubers</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.graduateVTubers\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        // Typescript does not accept concat two array of different types\n        conditionalRowStyles={ActivityRowStyles.concat(\n          IsTodayRowStyle as Array<any>\n        )}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default GraduateVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}