{"version":3,"sources":["webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/GroupList/style.module.css","webpack:///./components/Profile/index.tsx","webpack:///./utils/sort/NameSort.ts","webpack:///./routes/GroupList/index.tsx","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["SearchBar","props","_props$filterText","h","class","style","type","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","row","activity","backgroundColor","cursor","undefined","debutInfo","hasDebutInfo","isRecentlyDebut","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","Fragment","Text","id","concat","Profile","ToolTip","text","VTuber","name","ProfileImage","VTuberId","imgUrl","size","clickBehavior","NameSort","rowA","rowB","localeCompare","GroupListPage","document","title","dictionary","header","groupList","cell","href","GetRoute","sortFunction","sortable","minWidth","maxWidth","selector","popularity","right","averageSubscriberCount","totalSubscriberCount","memberCount","memberList","map","e","key","_useState2","_slicedToArray","useState","setData","_useState4","filterGroup","setFilterGroup","_useState6","filterGroupMember","setFilterGroupMember","_useState8","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByGroup","target","searchByGroupMember","accumulator","prev","current","_GetCount","_current$YouTube","_GetCount2","_current$Twitch","GetCount","YouTube","subscriber","Twitch","follower","_useState10","pending","setPending","getVTubers","_ref","Api","then","res","groups","members","length","Math","round","reduce","dataToDisplayData","sort","a","b","apply","arguments","useEffect","QuestionMarkToolTip","width","fontSize","DataTable","_extends","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","children","countType","tag","count","CountTypeCompare"],"mappings":"2GACe,EAAa,mBAAb,EAA4C,mBAA5C,EAAwE,gBC2BxEA,IAlBwC,SACrDC,GAAqB,IAAAC,EAAA,OAErBC,YAAA,OAAKC,MAAOC,GACVF,YAAA,SACEG,KAAK,OACLF,MAAOC,EACPE,YAAaN,EAAMO,gBACnBC,MAAuB,QAAlBP,EAAED,EAAMS,kBAAU,IAAAR,IAAI,GAC3BS,SAAUV,EAAMW,WAGlBT,YAAA,UAAQG,KAAK,SAASF,MAAOC,EAAcQ,QAASZ,EAAMa,SAAS,KAG/D,C,kCCcOC,IApCW,CACxB,CACEC,KAAM,SAACC,GAA2B,MACf,cAAjBA,EAAIC,QAAwB,EAC9Bb,MAAO,CACLc,gBAAiB,2BACjB,UAAW,CACTC,OAAQ,aAId,CACEJ,KAAM,SAACC,GAAkD,MACtC,WAAjBA,EAAIC,eACcG,IAAlBJ,EAAIK,YAC2B,IAA/BL,EAAIK,UAAUC,eACoB,IAAlCN,EAAIK,UAAUE,eAAwB,EACxCnB,MAAO,CACLc,gBAAiB,2BACjB,UAAW,CACTC,OAAQ,aAId,CACEJ,KAAM,SAACC,GAA2B,MAA+B,aAAjBA,EAAIC,QAAuB,EAC3Eb,MAAO,CACLc,gBAAiB,2BACjBM,MAAO,QACP,UAAW,CACTL,OAAQ,iB,oCChChB,gBAYeM,IARe,WAAH,MAEJ,CACrBC,QAAS,GACTC,KAAM,GACNC,qBAAsBd,IACvB,C,qCCXD,sFAKae,EAA4B,WACvC,IAAMC,EACJC,cAEF,OAAQD,GACN,IAAK,KACL,IAAK,KACL,IAAK,KACH,OACE5B,YAAA8B,EAAA,KACG,IAAI,IACJ9B,YAAC+B,IAAI,CAACC,GAAG,oBAAmB,iBAC7BhC,YAAC+B,IAAI,CAACC,GAAE,oBAAAC,OAAsBL,IAAuB,eAE7C,IAAI,WAKlB,QACE,OAAO,KAEb,C,+hDC1Be,G,UAAe,sB,oCCwBfM,EAfoC,SACjDpC,GAEA,OACEE,YAACmC,IAAO,CAACC,KAAMtC,EAAMuC,OAAOC,MAC1BtC,YAACuC,IAAY,CACXC,SAAU1C,EAAMuC,OAAOL,GACvBS,OAAQ3C,EAAMuC,OAAOI,OACrBC,KAAM5C,EAAM4C,KACZC,cAAc,UAItB,E,wBCrBaC,EAAiD,SAACC,EAAMC,GACnE,OAAOD,EAAKP,KAAKS,cAAcD,EAAKR,KACtC,E,wBCuMeU,UAlLgD,SAC7DlD,GAEAmD,SAASC,MAAQ,GAAHjB,OAAMnC,EAAMqD,WAAWC,OAAOC,UAAS,OAAApB,OAAMnC,EAAMqD,WAAWC,OAAOF,OACnF,IAAM1B,EAAgD,CACpD,CACEc,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,qBAAoB,QACnCsB,KAAM,SAACxC,GAAqB,OAC1Bd,YAAA,KAAGuD,KAAMC,YAAS,CAAErD,KAAM,QAASmC,KAAMxB,EAAIwB,QAAUxB,EAAIwB,KAAS,EAEtEmB,aAAcb,EACdc,UAAU,EACVC,SAAU,QACVC,SAAU,SAEZ,CACEtB,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,oBAAmB,cAClC6B,SAAU,SAAC/C,GAA2B,OAAaA,EAAIgD,UAAU,EACjEC,OAAO,EACPL,UAAU,EACVC,SAAU,OACVC,SAAU,SAEZ,CACEtB,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,gCAA+B,uBAC9C6B,SAAU,SAAC/C,GAAuC,OAChDA,EAAIkD,sBAAsB,EAC5BD,OAAO,EACPL,UAAU,EACVC,SAAU,OACVC,SAAU,SAEZ,CACEtB,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,8BAA6B,qBAC5C6B,SAAU,SAAC/C,GAAqC,OAC9CA,EAAImD,oBAAoB,EAC1BF,OAAO,EACPL,UAAU,EACVC,SAAU,OACVC,SAAU,SAEZ,CACEtB,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,qBAAoB,gBACnC6B,SAAU,SAAC/C,GAA4B,OAAaA,EAAIoD,WAAW,EACnEH,OAAO,EACPL,UAAU,EACVC,SAAU,OACVC,SAAU,SAEZ,CACEtB,KAAMtC,YAAC+B,IAAI,CAACC,GAAG,oBAAmB,WAClCsB,KAAM,SAACxC,GAEN,OACCd,YAAA,OAAKC,MAAOC,GACTY,EAAIqD,WAAWC,KAAI,SAACC,GAAC,OACpBrE,YAACkC,EAAO,CAACoC,IAAKD,EAAErC,GAAIK,OAAQgC,GAAK,IAE/B,IAMiDE,EAAAC,EAArCC,YAAkC,IAAG,GAAtDhD,EAAI8C,EAAA,GAAEG,EAAOH,EAAA,GACsCI,EAAAH,EAApBC,YAAiB,IAAG,GAAnDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GACoCG,EAAAN,EAApBC,YAAiB,IAAG,GAA/DM,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAEpBG,EAAAT,EAAxBC,aAAkB,GAAM,GADnBS,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GAEhDG,EAAe3D,EAClB4D,QAAO,SAACC,GACP,YAAkBpE,IAAdoE,EAAKhD,MACFgD,EAAKhD,KAAKiD,cAAcC,SAASZ,EAAYW,cACtD,IACCF,QAAO,SAACC,GACP,YAAwBpE,IAApBoE,EAAKnB,YACFmB,EAAKnB,WACTC,KAAI,SAACC,GAAC,OACLA,EAAE/B,KAAKiD,cAAcC,SAAST,EAAkBQ,cAAc,IAE/DC,UAAS,EACd,IAEIC,EAAqBC,aAAQ,WAejC,OACE1F,YAAA,OAAKC,MAAO0F,IAAWC,gBACrB5F,YAACH,IAAS,CACRQ,gBAAiBP,EAAMqD,WAAW0C,MAAMC,cACxCrF,SAAU,SAAC4D,GAAM,OAAWQ,EAAeR,EAAE0B,OAAOzF,MAAM,EAC1DK,QAnBmB,WACnBiE,IACFO,GAA0BD,GAC1BL,EAAe,IAEnB,EAeMtE,WAAYqE,IAEd5E,YAACH,IAAS,CACRQ,gBAAiBP,EAAMqD,WAAW0C,MAAMG,oBACxCvF,SAAU,SAAC4D,GAAM,OAAWW,EAAqBX,EAAE0B,OAAOzF,MAAM,EAChEK,QAlByB,WACzBoE,IACFI,GAA0BD,GAC1BF,EAAqB,IAEzB,EAcMzE,WAAYwE,IAIpB,GAAG,CAACH,EAAaG,EAAmBG,EAAuBpF,EAAMqD,aAE3D8C,EAAc,SAACC,EAAcC,GAAmB,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACpDL,GACsC,QADlCE,EACHI,YAAwB,QAAhBH,EAACF,EAAQM,eAAO,IAAAJ,OAAA,EAAfA,EAAiBK,mBAAW,IAAAN,IAAI,IACP,QADSE,EAC3CE,YAAuB,QAAfD,EAACJ,EAAQQ,cAAM,IAAAJ,OAAA,EAAdA,EAAgBK,iBAAS,IAAAN,IAAI,EAAE,EAeCO,EAAArC,EAAdC,aAAS,GAAK,GAArCqC,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAU,e,EAAAC,G,EAAG,kBACXC,MAAgBC,MAAK,SAACC,GAC1B1C,EACE0C,EAAI3F,KAAK4F,OACNjD,KAAI,SAACC,GAAC,OAnBW,SAACA,GAAY,MAAwB,CAC7DrC,GAAIqC,EAAErC,GACNM,KAAM+B,EAAE/B,KACRwB,WAAYO,EAAEP,WACdE,uBACuB,IAArBK,EAAEiD,QAAQC,OACNC,KAAKC,MAAMpD,EAAEiD,QAAQI,OAAOzB,EAAa,GAAK5B,EAAEiD,QAAQC,QACxD,EACNtD,qBAAsBI,EAAEiD,QAAQI,OAAOzB,EAAa,GACpD/B,YAAaG,EAAEiD,QAAQC,OACvBpD,WAAYE,EAAEiD,QACf,CAQmBK,CAAkBtD,EAAE,IAC/BuD,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEhE,WAAa+D,EAAE/D,UAAU,KAE/CiD,GAAW,EACb,GACF,E,+KAAC,kBATe,OAAAE,EAAAc,MAAA,KAAAC,UAAA,KAehB,OAJAC,aAAU,WACRjB,GACF,GAAG,IAGDhH,YAAC8B,WAAQ,KACP9B,YAAA,UACEA,YAAC+B,IAAI,CAACC,GAAG,oBAAmB,cAC3BL,cACD3B,YAACkI,IAAmB,CAClBC,MAAM,QACNC,SAAS,OACThG,KAAMpC,YAAC+B,IAAI,CAACC,GAAG,qBAAoB,mBAGvChC,YAACqI,IAASC,EAAA,GACJ/G,IAAqB,CACzBC,QAASA,EACTC,KAAM2D,EACNmD,aAAW,EACXC,YAAU,EACVC,2BAA4B3I,EAAMqD,WAAW0C,MAAM6C,kBACnDC,kBAAmB3I,YAAC+B,IAAI,CAACC,GAAG,gBAAe,cAC3C4G,gBAAiB9B,EACjB+B,WAAS,EACTC,mBAAoBrD,KAI5B,C,oDCxMe,EAAW,iBAAX,EAA0C,qBCyB1CtD,IAhBoC,SACjDrC,GAEA,OACEE,YAAA,OAAKC,MAAOC,GACTJ,EAAMiJ,SACP/I,YAAA,QACEC,MAAOC,EACPA,MAAO,CAAEiI,MAAOrI,EAAMqI,MAAOC,SAAUtI,EAAMsI,WAE5CtI,EAAMsC,MAIf,C,oCCxBA,oEAGO,IAAMoE,EAAW,SAACwC,GACvB,QAAkB9H,IAAd8H,EAAyB,OAAO,KAEpC,OAAQA,EAAUC,KAChB,IAAK,MACH,OAAOD,EAAUE,MACnB,IAAK,SACL,IAAK,KACH,OAAO,KAEb,EAGaC,EAAmB,SAACtB,EAAcC,GAC7C,OAAQD,EAAEoB,KACR,IAAK,MACH,OAAQnB,EAAEmB,KACR,IAAK,MACH,OAAOpB,EAAEqB,MAAQpB,EAAEoB,MACrB,IAAK,SAEL,IAAK,KACH,OAAO,EAIb,IAAK,SACH,OAAQpB,EAAEmB,KACR,IAAK,MACH,OAAQ,EACV,IAAK,SACH,OAAO,EACT,IAAK,KACH,OAAO,EAIb,IAAK,KACH,OAAQnB,EAAEmB,KACR,IAAK,MAEL,IAAK,SACH,OAAQ,EACV,IAAK,KACH,OAAO,GAIjB,C,kCClDe,KAAC,eAAiB,2B,gECAlB,EAAgB,sBCmBhBf,IAVuD,SACpEpI,GAEA,OACEE,YAACmC,IAAO,CAACC,KAAMtC,EAAMsC,KAAM+F,MAAOrI,EAAMqI,MAAOC,SAAUtI,EAAMsI,UAC7DpI,YAAA,OAAKC,MAAOC,IAGlB,C","file":"route-GroupList.chunk.cd61d.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileGrid\":\"profileGrid__glJEL\"};","import { FunctionalComponent, h } from 'preact';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport ProfileImage from '../ProfileImage';\nimport ToolTip from '../ToolTip';\n\nexport interface ProfileProps {\n  VTuber: VTuberData;\n  size?: number;\n}\n\nconst Profile: FunctionalComponent<ProfileProps> = (\n  props: ProfileProps\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.VTuber.name}>\n      <ProfileImage\n        VTuberId={props.VTuber.id}\n        imgUrl={props.VTuber.imgUrl}\n        size={props.size}\n        clickBehavior=\"popup\"\n      />\n    </ToolTip>\n  );\n};\n\nexport default Profile;\n","import { ColumnSortFunction } from 'react-data-table-component/dist/src/DataTable/types';\n\nexport const NameSort: ColumnSortFunction<{ name: string }> = (rowA, rowB) => {\n  return rowA.name.localeCompare(rowB.name);\n};\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupDisplayData } from '../../types/TableDisplayData/GroupDisplayData';\nimport SearchBar from '../../components/SearchBar';\nimport { GroupData } from '../../types/ApiData/GroupData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport style from './style.module.css';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport Profile from '../../components/Profile';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport { GetRoute } from '../../utils/TypeSafeRouting';\nimport { NameSort } from '../../utils/sort/NameSort';\nimport { GetCount } from '../../utils/CountTypeUtils';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\n\nexport interface GroupListPageProps {\n  dictionary: Dictionary;\n}\n\nconst GroupListPage: FunctionalComponent<GroupListPageProps> = (\n  props: GroupListPageProps\n) => {\n  document.title = `${props.dictionary.header.groupList} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<GroupDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      cell: (row: { name: string }): h.JSX.Element => (\n        <a href={GetRoute({ type: 'group', name: row.name })}>{row.name}</a>\n      ),\n      sortFunction: NameSort,\n      sortable: true,\n      minWidth: '100px',\n      maxWidth: '150px',\n    },\n    {\n      name: <Text id=\"table.popularity\">Popularity</Text>,\n      selector: (row: { popularity: number }): number => row.popularity,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.averageSubscriberCount\">Average Subscribers</Text>,\n      selector: (row: { averageSubscriberCount: number }): number =>\n        row.averageSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.totalSubscriberCount\">Total Subscribers</Text>,\n      selector: (row: { totalSubscriberCount: number }): number =>\n        row.totalSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberCount\">Member Count</Text>,\n      selector: (row: { memberCount: number }): number => row.memberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberList\">Members</Text>,\n      cell: (row: {\n        memberList: ReadonlyArray<VTuberData>;\n      }): h.JSX.Element | null => (\n        <div class={style.profileGrid}>\n          {row.memberList.map((e) => (\n            <Profile key={e.id} VTuber={e} />\n          ))}\n        </div>\n      ),\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupDisplayData>>([]);\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [filterGroupMember, setFilterGroupMember] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter((item) => {\n      if (item.name === undefined) return true;\n      return item.name.toLowerCase().includes(filterGroup.toLowerCase());\n    })\n    .filter((item) => {\n      if (item.memberList === undefined) return true;\n      return item.memberList\n        .map((e) =>\n          e.name.toLowerCase().includes(filterGroupMember.toLowerCase())\n        )\n        .includes(true);\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    const handleClearGroupMember = (): void => {\n      if (filterGroupMember) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroupMember('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroupMember}\n          onFilter={(e: any): void => setFilterGroupMember(e.target.value)}\n          onClear={handleClearGroupMember}\n          filterText={filterGroupMember}\n        />\n      </div>\n    );\n  }, [filterGroup, filterGroupMember, resetPaginationToggle, props.dictionary]);\n\n  const accumulator = (prev: number, current: VTuberData): number =>\n    prev +\n    (GetCount(current.YouTube?.subscriber) ?? 0) +\n    (GetCount(current.Twitch?.follower) ?? 0);\n\n  const dataToDisplayData = (e: GroupData): GroupDisplayData => ({\n    id: e.id,\n    name: e.name,\n    popularity: e.popularity,\n    averageSubscriberCount:\n      e.members.length !== 0\n        ? Math.round(e.members.reduce(accumulator, 0) / e.members.length)\n        : 0,\n    totalSubscriberCount: e.members.reduce(accumulator, 0),\n    memberCount: e.members.length,\n    memberList: e.members,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroups().then((res) => {\n      setData(\n        res.data.groups\n          .map((e) => dataToDisplayData(e))\n          .sort((a, b) => b.popularity - a.popularity) // sort in descending order\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.groupList\">Group List</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.groupList\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default GroupListPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","/* eslint-disable no-fallthrough */\nimport { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has': {\n      switch (b.tag) {\n        case 'has':\n          return a.count - b.count;\n        case 'hidden':\n          return 1;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'hidden': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return 0;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'no': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return -1;\n        case 'no':\n          return 0;\n      }\n    }\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}