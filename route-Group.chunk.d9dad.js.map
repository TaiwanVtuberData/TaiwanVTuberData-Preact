{"version":3,"sources":["webpack:///./utils/transform/DebutStringToDebutInfo.ts","webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./global/TodayDate.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./utils/NumberUtils.ts","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./routes/Group/index.tsx","webpack:///./utils/transform/GroupMemberTransform.ts","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["maybeDebutStringToDebutInfo","debutString","hasDebutInfo","debutStringToDebutInfo","debutDate","isToday","TODAY_DATE_STRING","isRecentlyDebut","dateDiffInDays","dateStringToDate","TIMEZONE_DIFF_IN_HOUR","TODAY_DATE","YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","_GetCount","_GetCount2","_GetCount3","_GetCount4","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","tryParseInteger","process","getDateAfterTimezoneAdjustment","Date","getISODateString","NameColumn","name","h","Text","id","cell","row","ProfileImagePopup","VTuberId","imgUrl","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","concat","style","CountFragment","countType","TwitchSpan","TwitchCount","Fragment","ProfileImage","clickBehavior","PrependSign","value","valueToPercentString","toFixed","GrowthDisplayDataToString","e","tableTranslation","percentage","recordType","noRecord","atLeast","diff","str","defaultValue","parsedVal","parseInt","isNaN","YouTubeTwitchCountColumn","NationalityColumn","selector","_row$nationality","nationality","SearchBar","_props$filterText","type","placeholder","placeholderText","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","debutInfo","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GroupPage","document","title","groupName","dictionary","header","_objectSpread","sortable","sortFunction","PopularVideoColumn","_useState2","_slicedToArray","useState","setData","_useState4","filterName","setFilterName","_useState6","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByDisplayName","target","_useState8","pending","setPending","getVTubers","_ref","Api","then","res","VTubers","map","GroupMemberToDisplay","apply","arguments","useEffect","DataTable","_extends","fixedHeader","progressComponent","progressPending","subHeader","subHeaderComponent","VTuberBasicToDisplay","tag","count","a","b","popularVideo","ShowVideoButton","omit","ENFORCE_YOUTUBE_COMPLIANCE","_e$YouTube","_e$YouTube2","_e$Twitch","_e$Twitch2","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower","group"],"mappings":"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","file":"route-Group.chunk.d9dad.js","sourcesContent":["import {\n  TIMEZONE_DIFF_IN_HOUR,\n  TODAY_DATE,\n  TODAY_DATE_STRING,\n} from '../../global/TodayDate';\nimport { DebutInfo, HasDebutInfo } from '../../types/DebutInfo';\nimport { dateDiffInDays, dateStringToDate } from '../DateTimeUtils';\n\nexport const maybeDebutStringToDebutInfo = (\n  debutString?: string\n): DebutInfo => {\n  if (debutString === null || debutString === undefined)\n    return { hasDebutInfo: false };\n\n  return debutStringToDebutInfo(debutString);\n};\n\nexport const debutStringToDebutInfo = (debutString: string): HasDebutInfo => {\n  return {\n    hasDebutInfo: true,\n    debutDate: debutString,\n    isToday: debutString === TODAY_DATE_STRING,\n    isRecentlyDebut:\n      dateDiffInDays(\n        dateStringToDate(debutString, TIMEZONE_DIFF_IN_HOUR),\n        TODAY_DATE\n      ) < 30,\n  };\n};\n","import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType },\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType },\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType },\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType },\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import {\n  getDateAfterTimezoneAdjustment,\n  getISODateString,\n} from '../utils/DateTimeUtils';\nimport { tryParseInteger } from '../utils/NumberUtils';\n\nconst DEFAULT_TIMEZONE_DIFF_IN_HOUR = 8;\n\nexport const TIMEZONE_DIFF_IN_HOUR: number = tryParseInteger(\n  process.env.TIMEZONE_DIFF_IN_HOUR,\n  DEFAULT_TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE: Date = getDateAfterTimezoneAdjustment(\n  new Date(),\n  TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE_STRING: string = getISODateString(\n  TODAY_DATE,\n  TIMEZONE_DIFF_IN_HOUR\n);\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData,\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { GrowthRecordType } from '../types/Common/GrowthData';\n\nexport const PrependSign = (value: number): string => {\n  if (value > 0) return `+${value}`;\n  if (value < 0) return `${value}`;\n\n  return '0';\n};\n\nconst valueToPercentString = (value: number): string =>\n  (value * 100).toFixed(2);\n\nexport const GrowthDisplayDataToString = (\n  e: { diff: number; recordType: GrowthRecordType; percentage?: number },\n  tableTranslation: { noRecord: string; atLeast: string }\n): string => {\n  if (e.percentage) {\n    switch (e.recordType) {\n      case 'none':\n        return tableTranslation.noRecord;\n      case 'partial':\n        return `${tableTranslation.atLeast} ${PrependSign(\n          e.diff\n        )} (${valueToPercentString(e.percentage as number)}%)`;\n      case 'full':\n        return `${PrependSign(e.diff)} (${valueToPercentString(\n          e.percentage\n        )}%)`;\n    }\n  }\n\n  switch (e.recordType) {\n    case 'none':\n      return tableTranslation.noRecord;\n    case 'partial':\n      return `${tableTranslation.atLeast} ${PrependSign(e.diff)}`;\n    case 'full':\n      return `${PrependSign(e.diff)}`;\n  }\n};\n\nexport const tryParseInteger = (\n  str: string | undefined,\n  defaultValue: number\n): number => {\n  if (str !== undefined) {\n    const parsedVal = parseInt(str, 10);\n    if (isNaN(parsedVal) === false) {\n      return parsedVal;\n    }\n  }\n\n  return defaultValue;\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData,\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData,\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity },\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupMemberDisplayData } from '../../types/TableDisplayData/GroupMemberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { GroupMemberToDisplay } from '../../utils/transform/GroupMemberTransform';\nimport { YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort } from '../../utils/sort/SubscriberCountSort';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\n\nexport interface GroupPageProps {\n  groupName: string;\n  dictionary: Dictionary;\n}\n\nconst GroupPage: FunctionalComponent<GroupPageProps> = (\n  props: GroupPageProps\n) => {\n  document.title = `${props.groupName} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<GroupMemberDisplayData>> = [\n    NameColumn(),\n    {\n      ...YouTubeTwitchCountColumn(),\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort,\n    },\n    PopularVideoColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupMemberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data.filter(\n    (item) =>\n      item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n  );\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n      </div>\n    );\n  }, [filterName, resetPaginationToggle, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroupVTubers(props.groupName).then((res) => {\n      setData(res.data.VTubers.map((e) => GroupMemberToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.group\">Group</Text>\n        <span class=\"highlightText\"> {props.groupName} </span>\n        <Text id=\"header.memberList\">members</Text>\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        fixedHeader\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default GroupPage;\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { GroupMemberDisplayData } from '../../types/TableDisplayData/GroupMemberDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const GroupMemberToDisplay = (\n  e: VTuberData\n): GroupMemberDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n});\n","/* eslint-disable no-fallthrough */\nimport { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has': {\n      switch (b.tag) {\n        case 'has':\n          return a.count - b.count;\n        case 'hidden':\n          return 1;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'hidden': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return 0;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'no': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return -1;\n        case 'no':\n          return 0;\n      }\n    }\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\nimport { ENFORCE_YOUTUBE_COMPLIANCE } from '../Config';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData,\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n    omit: ENFORCE_YOUTUBE_COMPLIANCE,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport { maybeDebutStringToDebutInfo } from './DebutStringToDebutInfo';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n  debutInfo: maybeDebutStringToDebutInfo(e.debutDate),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}