{"version":3,"sources":["webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/GroupList/style.module.css","webpack:///./components/Profile/index.tsx","webpack:///./utils/sort/NameSort.ts","webpack:///./routes/GroupList/index.tsx","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["SearchBar","props","class","style","type","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","row","activity","backgroundColor","cursor","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","id","Profile","ToolTip","text","VTuber","name","ProfileImage","VTuberId","imgUrl","size","clickBehavior","NameSort","rowA","rowB","localeCompare","GroupListPage","document","title","dictionary","header","groupList","cell","href","GetRoute","sortFunction","sortable","minWidth","maxWidth","selector","popularity","right","averageSubscriberCount","totalSubscriberCount","memberCount","memberList","map","e","key","setData","useState","filterGroup","setFilterGroup","filterGroupMember","setFilterGroupMember","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","undefined","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByGroup","target","searchByGroupMember","accumulator","prev","current","GetCount","YouTube","subscriber","Twitch","follower","pending","setPending","getVTubers","async","Api","then","res","groups","members","length","Math","round","reduce","dataToDisplayData","sort","a","b","useEffect","QuestionMarkToolTip","width","fontSize","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","children","countType","tag","count","CountTypeCompare"],"mappings":"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","file":"route-GroupList.chunk.a3176.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileGrid\":\"profileGrid__glJEL\"};","import { FunctionalComponent, h } from 'preact';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport ProfileImage from '../ProfileImage';\nimport ToolTip from '../ToolTip';\n\nexport interface ProfileProps {\n  VTuber: VTuberData;\n  size?: number;\n}\n\nconst Profile: FunctionalComponent<ProfileProps> = (\n  props: ProfileProps\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.VTuber.name}>\n      <ProfileImage\n        VTuberId={props.VTuber.id}\n        imgUrl={props.VTuber.imgUrl}\n        size={props.size}\n        clickBehavior=\"goToPage\"\n      />\n    </ToolTip>\n  );\n};\n\nexport default Profile;\n","import { ColumnSortFunction } from 'react-data-table-component/dist/src/DataTable/types';\n\nexport const NameSort: ColumnSortFunction<{ name: string }> = (rowA, rowB) => {\n  return rowA.name.localeCompare(rowB.name);\n};\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupDisplayData } from '../../types/TableDisplayData/GroupDisplayData';\nimport SearchBar from '../../components/SearchBar';\nimport { GroupData } from '../../types/ApiData/GroupData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport style from './style.module.css';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport Profile from '../../components/Profile';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport { GetRoute } from '../../utils/TypeSafeRouting';\nimport { NameSort } from '../../utils/sort/NameSort';\nimport { GetCount } from '../../utils/CountTypeUtils';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\n\nexport interface GroupListPageProps {\n  dictionary: Dictionary;\n}\n\nconst GroupListPage: FunctionalComponent<GroupListPageProps> = (\n  props: GroupListPageProps\n) => {\n  document.title = `${props.dictionary.header.groupList} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<GroupDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      cell: (row: { name: string }): h.JSX.Element => (\n        <a href={GetRoute({ type: 'group', name: row.name })}>{row.name}</a>\n      ),\n      sortFunction: NameSort,\n      sortable: true,\n      minWidth: '100px',\n      maxWidth: '150px',\n    },\n    {\n      name: <Text id=\"table.popularity\">Popularity</Text>,\n      selector: (row: { popularity: number }): number => row.popularity,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.averageSubscriberCount\">Average Subscribers</Text>,\n      selector: (row: { averageSubscriberCount: number }): number =>\n        row.averageSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.totalSubscriberCount\">Total Subscribers</Text>,\n      selector: (row: { totalSubscriberCount: number }): number =>\n        row.totalSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberCount\">Member Count</Text>,\n      selector: (row: { memberCount: number }): number => row.memberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberList\">Members</Text>,\n      cell: (row: {\n        memberList: ReadonlyArray<VTuberData>;\n      }): h.JSX.Element | null => (\n        <div class={style.profileGrid}>\n          {row.memberList.map((e) => (\n            <Profile key={e.id} VTuber={e} />\n          ))}\n        </div>\n      ),\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupDisplayData>>([]);\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [filterGroupMember, setFilterGroupMember] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter((item) => {\n      if (item.name === undefined) return true;\n      return item.name.toLowerCase().includes(filterGroup.toLowerCase());\n    })\n    .filter((item) => {\n      if (item.memberList === undefined) return true;\n      return item.memberList\n        .map((e) =>\n          e.name.toLowerCase().includes(filterGroupMember.toLowerCase())\n        )\n        .includes(true);\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    const handleClearGroupMember = (): void => {\n      if (filterGroupMember) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroupMember('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroupMember}\n          onFilter={(e: any): void => setFilterGroupMember(e.target.value)}\n          onClear={handleClearGroupMember}\n          filterText={filterGroupMember}\n        />\n      </div>\n    );\n  }, [filterGroup, filterGroupMember, resetPaginationToggle, props.dictionary]);\n\n  const accumulator = (prev: number, current: VTuberData): number =>\n    prev +\n    (GetCount(current.YouTube?.subscriber) ?? 0) +\n    (GetCount(current.Twitch?.follower) ?? 0);\n\n  const dataToDisplayData = (e: GroupData): GroupDisplayData => ({\n    id: e.id,\n    name: e.name,\n    popularity: e.popularity,\n    averageSubscriberCount:\n      e.members.length !== 0\n        ? Math.round(e.members.reduce(accumulator, 0) / e.members.length)\n        : 0,\n    totalSubscriberCount: e.members.reduce(accumulator, 0),\n    memberCount: e.members.length,\n    memberList: e.members,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroups().then((res) => {\n      setData(\n        res.data.groups\n          .map((e) => dataToDisplayData(e))\n          .sort((a, b) => b.popularity - a.popularity) // sort in descending order\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.groupList\">Group List</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.groupList\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default GroupListPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}