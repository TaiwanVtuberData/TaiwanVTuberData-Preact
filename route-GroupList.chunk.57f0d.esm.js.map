{"version":3,"sources":["webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./routes/GroupList/index.tsx","webpack:///./services/ApiService.ts"],"names":["SearchBar","props","type","class","style","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","row","activity","backgroundColor","color","cursor","DefaultDataTableProps","columns","data","conditionalRowStyles","fixedHeader","GroupListPage","document","title","dictionary","header","groupList","name","id","width","wrap","sortable","cell","href","baseroute","right","selector","popularity","averageSubscriberCount","totalSubscriberCount","memberCount","setData","useState","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","undefined","toLowerCase","includes","searchBarComponent","useMemo","table","searchByGroup","e","target","accumulator","prev","current","YouTube","subscriberCount","Twitch","followerCount","pending","setPending","getVTubers","async","Api","then","res","groups","map","members","length","reduce","memberList","dataToDisplayData","useEffect","pagination","paginationComponentOptions","paginationOptions","progressComponent","loading","progressPending","subHeader","subHeaderComponent","commitDetail","AxiosGetWrapper","axios","get","sha","date","commit","author","catch","defaults","baseURL","setCommitDetail","url","getGroupVTubers","group","getGroups"],"mappings":"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","file":"route-GroupList.chunk.57f0d.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <Fragment>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </Fragment>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(248, 148, 6, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n  fixedHeader: true,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport baseroute from '../../baseroute';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupDisplayData } from '../../types/GroupDisplayData';\nimport SearchBar from '../../components/SearchBar';\nimport { GroupData } from '../../types/GroupData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport '../../style/DataTableStyle.css';\nimport { VTuberData } from '../../types/VTuberData';\n\nexport interface GroupListPageProps {\n  dictionary: Dictionary;\n}\n\nconst GroupListPage: FunctionalComponent<GroupListPageProps> = (\n  props: GroupListPageProps\n) => {\n  document.title = `${props.dictionary.header.groupList} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<GroupDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      width: '25%',\n      wrap: true,\n      sortable: true,\n      cell: (row: { name: string }): h.JSX.Element => (\n        <a href={`${baseroute}/group/${row.name}`}>{row.name}</a>\n      ),\n    },\n    {\n      name: <Text id=\"table.popularity\">Popularity</Text>,\n      width: `10%`,\n      right: true,\n      sortable: true,\n      selector: (row: { popularity: number }): number => row.popularity,\n    },\n    {\n      name: <Text id=\"table.averageSubscriberCount\">Average Subscribers</Text>,\n      width: `10%`,\n      right: true,\n      sortable: true,\n      selector: (row: { averageSubscriberCount: number }): number =>\n        row.averageSubscriberCount,\n    },\n    {\n      name: <Text id=\"table.totalSubscriberCount\">Total Subscribers</Text>,\n      width: `10%`,\n      right: true,\n      sortable: true,\n      selector: (row: { totalSubscriberCount: number }): number =>\n        row.totalSubscriberCount,\n    },\n    {\n      name: <Text id=\"table.memberCount\">Member Count</Text>,\n      width: `10%`,\n      right: true,\n      sortable: true,\n      selector: (row: { memberCount: number }): number => row.memberCount,\n    },\n    {\n      name: <Text id=\"table.memberList\">Members</Text>,\n      width: `10%`,\n      cell: (row: { memberList: h.JSX.Element | null }): h.JSX.Element | null =>\n        null,\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupDisplayData>>([]);\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data.filter((item) => {\n    if (item.name === undefined) return true;\n    return item.name.toLowerCase().includes(filterGroup.toLowerCase());\n  });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    return (\n      <Fragment>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </Fragment>\n    );\n  }, [filterGroup, resetPaginationToggle, props.dictionary]);\n\n  const accumulator = (prev: number, current: VTuberData) =>\n    prev +\n    (current.YouTube?.subscriberCount ?? 0) +\n    (current.Twitch?.followerCount ?? 0);\n\n  const dataToDisplayData = (e: GroupData): GroupDisplayData => ({\n    id: e.id,\n    name: e.name,\n    popularity: e.popularity,\n    averageSubscriberCount:\n      e.members.length !== 0\n        ? e.members.reduce(accumulator, 0) / e.members.length\n        : 0,\n    totalSubscriberCount: e.members.reduce(accumulator, 0),\n    memberCount: e.members.length,\n    memberList: null,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroups().then((res) => {\n      setData(res.data.groups.map((e) => dataToDisplayData(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.groupList\">Group List</Text>\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={props.dictionary.table.loading}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default GroupListPage;\n","import axios, { AxiosResponse } from 'axios';\nimport { GroupDataResponse } from '../types/GroupData';\nimport { VTuberDataResponse } from '../types/VTuberData';\n\ninterface CommitDetail {\n  sha: string;\n  date?: string;\n}\n\nlet commitDetail: CommitDetail;\n\nconst setCommitDetail = async (): Promise<void> => {\n  await axios\n    .get(\n      'https://api.github.com/repos/nh60211as/TaiwanVtuberTrackingDataJson/commits/master'\n    )\n    .then((res) => {\n      commitDetail = {\n        sha: res.data.sha,\n        date: res.data.commit.author.date,\n      };\n    })\n    .catch(() => {\n      commitDetail = {\n        sha: 'master',\n      };\n    });\n\n  axios.defaults.baseURL = `https://cdn.statically.io/gh/nh60211as/TaiwanVtuberTrackingDataJson/${commitDetail.sha}/api/v0`;\n};\n\nconst AxiosGetWrapper = async <DataType>(\n  url: string\n): Promise<AxiosResponse<DataType>> => {\n  if (commitDetail === undefined) await setCommitDetail();\n\n  return axios.get<DataType>(url);\n};\n\nexport const getVTubers = (): Promise<AxiosResponse<VTuberDataResponse>> => {\n  return AxiosGetWrapper<VTuberDataResponse>('/vtubers.json');\n};\n\nexport const getGroupVTubers = (\n  group: string\n): Promise<AxiosResponse<VTuberDataResponse>> => {\n  return AxiosGetWrapper<VTuberDataResponse>(`/groups/${group}/vtubers.json`);\n};\n\nexport const getGroups = (): Promise<AxiosResponse<GroupDataResponse>> => {\n  return AxiosGetWrapper<GroupDataResponse>(`/groups.json`);\n};\n"],"sourceRoot":""}