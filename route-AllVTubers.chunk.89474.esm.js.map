{"version":3,"sources":["webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./routes/AllVTubers/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./components/DropDownList/style.module.css","webpack:///./components/DropDownList/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","name","id","cell","row","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","AllVTubersPage","document","title","dictionary","header","allVTubers","setSortMethod","useState","columns","YouTubeTwitchCountColumn","PopularVideoColumn","NationalityColumn","data","setData","filterName","setFilterName","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","sort","searchBarComponent","useMemo","optionValue","option","value","tableStyle","searchBarGroup","tipText","table","sortingMethod","onChange","e","target","placeholderText","searchByDisplayName","onFilter","onClear","filterText","searchByGroup","pending","setPending","useEffect","async","Api","then","res","VTubers","map","VTuberBasicToDisplay","getVTubers","GetCurrentNationalitySpan","DefaultDataTableProps","conditionalRowStyles","ActivityRowStyles","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","ProfileImagePopup","ProfileImage","clickBehavior","DropDownList","dropDownStyle","dropDown","key","selector","nationality","SearchBar","placeholder","onClick","when","activity","backgroundColor","cursor","color","nationalityModifier","getNationalityModifierState","tag","count","a","b","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower"],"mappings":"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","file":"route-AllVTubers.chunk.89474.esm.js","sourcesContent":["import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport DropDownList from '../../components/DropDownList';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport {\n  SortMethod,\n  SubscriberCountDescendingSort,\n} from '../../utils/sort/SubscriberCountSort';\nimport { VTuberBasicToDisplay } from '../../utils/transform/BasicTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\n\nexport interface AllVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst AllVTubersPage: FunctionalComponent<AllVTubersPageProps> = (\n  props: AllVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.allVTubers} | ${props.dictionary.header.title}`;\n\n  const [sortMethod, setSortMethod] = useState<SortMethod>('YouTube+Twitch');\n\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (filterGroup === '') return true;\n      if (item.group === undefined) return false;\n      return item.group.toLowerCase().includes(filterGroup.toLowerCase());\n    })\n    .sort(SubscriberCountDescendingSort(sortMethod));\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    const optionValue: Array<{\n      option: h.JSX.Element;\n      value: SortMethod;\n    }> = [\n      {\n        option: (\n          <Text id=\"table.YouTubeTwitchCount\">\n            YouTube Subscribers + Twitch Followers\n          </Text>\n        ),\n        value: 'YouTube+Twitch',\n      },\n      {\n        option: (\n          <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>\n        ),\n        value: 'YouTube',\n      },\n      {\n        option: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n        value: 'Twitch',\n      },\n    ];\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <DropDownList\n          tipText={props.dictionary.table.sortingMethod}\n          value={sortMethod}\n          optionValue={optionValue}\n          onChange={(e: any) => setSortMethod(e.target.value)}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </div>\n    );\n  }, [filterName, filterGroup, resetPaginationToggle, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers('all').then((res) => {\n      setData(res.data.VTubers.map((e) => VTuberBasicToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.allVTubers\">All VTubers</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default AllVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"tipText\":\"tipText__4DHD3\"};","import { h } from 'preact';\nimport style from './style.module.css';\nimport dropDownStyle from '../../style/DropDownStyle.module.css';\n\nexport interface DropDownListProps<ValueType> {\n  tipText?: string;\n  optionValue?: Array<{ option: any; value: ValueType }>;\n  value?: ValueType;\n  onChange?: (e: unknown) => unknown;\n}\n\nfunction DropDownList<ValueType extends string | number>(\n  props: DropDownListProps<ValueType>\n): h.JSX.Element {\n  return (\n    <div>\n      <span class={style.tipText}>{props.tipText}</span>\n      <select\n        class={dropDownStyle.dropDown}\n        value={props.value}\n        onChange={props.onChange}\n      >\n        {props.optionValue !== undefined\n          ? props.optionValue.map((e) => (\n              <option key={e.value} value={e.value}>\n                {e.option}\n              </option>\n            ))\n          : null}\n      </select>\n    </div>\n  );\n}\n\nexport default DropDownList;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}