{"version":3,"sources":["webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./style/IsTodayRowStyles.ts","webpack:///./tableTypes/DebutDateColumn.tsx","webpack:///./utils/transform/DebutTransform.ts","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./routes/DebutVTubers/index.tsx","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","name","id","cell","row","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","ProfileImagePopup","ProfileImage","clickBehavior","YouTubeTwitchCountColumn","NationalityColumn","selector","nationality","SearchBar","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","IsTodayRowStyle","isToday","DebutDateColumn","debutDate","VTuberDebutToDisplay","e","todayDate","VTuberBasicToDisplay","ToolTip","children","width","fontSize","text","tag","count","a","b","DebutVTubersPage","document","title","dictionary","header","debutVTubers","sortable","sortFunction","PopularVideoColumn","useState","setData","filterDate","setFilterDate","filterName","setFilterName","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByDate","target","searchByDisplayName","searchByGroup","pending","setPending","getVTubers","getISODateString","Date","Api","then","res","VTubers","map","sort","localeCompare","useEffect","concat","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower","QuestionMarkToolTip"],"mappings":"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","file":"route-DebutVTubers.chunk.795d3.js","sourcesContent":["import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","const IsTodayRowStyle = [\n  {\n    when: (row: { isToday: boolean }): boolean => row.isToday,\n    style: {\n      color: 'mediumblue',\n    },\n  },\n];\n\nexport default IsTodayRowStyle;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface DebutDateColumnRowData {\n  debutDate: string;\n}\n\nexport const DebutDateColumn = <\n  RowData extends DebutDateColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.debutDate\">Debut Date</Text>,\n    selector: (row: { debutDate: string }): string => row.debutDate,\n  };\n};\n","import { VTuberDebutData } from '../../types/ApiData/VTuberDebutData';\nimport { VTuberDebutDisplayData } from '../../types/TableDisplayData/VTuberDebutDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const VTuberDebutToDisplay = (\n  e: VTuberDebutData,\n  todayDate: string\n): VTuberDebutDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  debutDate: e.debutDate,\n  isToday: e.debutDate === todayDate,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport IsTodayRowStyle from '../../style/IsTodayRowStyles';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDebutDisplayData } from '../../types/TableDisplayData/VTuberDebutDisplayData';\nimport { getISODateString } from '../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort } from '../../utils/sort/SubscriberCountSort';\nimport { VTuberDebutToDisplay } from '../../utils/transform/DebutTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { DebutDateColumn } from '../../tableTypes/DebutDateColumn';\n\nexport interface DebutVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst DebutVTubersPage: FunctionalComponent<DebutVTubersPageProps> = (\n  props: DebutVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.debutVTubers} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<VTuberDebutDisplayData>> = [\n    {\n      ...DebutDateColumn(),\n      sortable: true,\n    },\n    NameColumn(),\n    {\n      ...YouTubeTwitchCountColumn(),\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort,\n    },\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDebutDisplayData>>([]);\n  const [filterDate, setFilterDate] = useState<string>('');\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.debutDate &&\n        item.debutDate.toLowerCase().includes(filterDate.toLowerCase())\n    )\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (filterGroup === '') return true;\n      if (item.group === undefined) return false;\n      return item.group.toLowerCase().includes(filterGroup.toLowerCase());\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearDate = (): void => {\n      if (filterDate) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterDate('');\n      }\n    };\n\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDate}\n          onFilter={(e: any): void => setFilterDate(e.target.value)}\n          onClear={handleClearDate}\n          filterText={filterDate}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </div>\n    );\n  }, [\n    filterDate,\n    filterName,\n    filterGroup,\n    resetPaginationToggle,\n    props.dictionary,\n  ]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    const todayDate: string = getISODateString(new Date(), 8);\n    await Api.getDebutVTubers('recent').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .sort((a, b) => b.debutDate.localeCompare(a.debutDate))\n          .map((e) => VTuberDebutToDisplay(e, todayDate))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.debutVTubers\">Debut VTubers</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.debutVTubers\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        // Typescript does not accept concat two array of different types\n        conditionalRowStyles={ActivityRowStyles.concat(\n          IsTodayRowStyle as Array<any>\n        )}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default DebutVTubersPage;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}