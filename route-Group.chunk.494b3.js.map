{"version":3,"sources":["webpack:///./routes/Group/index.tsx"],"names":["GroupPage","props","document","title","groupName","dictionary","header","profileImgColumnWidth","columns","name","width","cell","row","profileImg","id","wrap","selector","channelLinks","hasYouTube","YouTubeSubscriberCount","right","sortable","sortFunction","YouTubeSubscriberCountSort","hasTwitch","TwitchFollowerCount","nationality","useState","data","setData","filterName","setFilterName","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","placeholderText","table","searchByDisplayName","onFilter","e","target","value","onClear","filterText","pending","setPending","getVTubers","Api","then","res","VTubers","map","ProfileImage","imgUrl","ChannelLinks","YouTubeId","YouTube","TwitchId","Twitch","undefined","subscriberCount","followerCount","activity","dataToDisplayData","useEffect","class","DefaultDataTableProps","progressPending","subHeader","subHeaderComponent"],"mappings":"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","file":"route-Group.chunk.494b3.js","sourcesContent":["import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport ChannelLinks from '../../components/ChannelLinks';\nimport ProfileImage from '../../components/ProfileImage';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupMemberDisplayData } from '../../types/GroupMemberDisplayData';\nimport { VTuberData } from '../../types/VTuberData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { YouTubeSubscriberCountSort } from '../../utils/YouTubeSubscriberCountSort';\nimport '../../style/index.css';\nimport '../../style/DataTableStyle.css';\n\nexport interface GroupPageProps {\n  groupName: string;\n  dictionary: Dictionary;\n}\n\nconst GroupPage: FunctionalComponent<GroupPageProps> = (\n  props: GroupPageProps\n) => {\n  document.title = `${props.groupName} | ${props.dictionary.header.title}`;\n\n  const profileImgColumnWidth: number = 75 as const;\n  const columns: Array<TableColumn<GroupMemberDisplayData>> = [\n    {\n      name: '',\n      width: `${profileImgColumnWidth}px`,\n      cell: (row: { profileImg: h.JSX.Element | null }): h.JSX.Element | null =>\n        row.profileImg,\n    },\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      width: `calc(${profileImgColumnWidth}px-30%)`,\n      wrap: true,\n      selector: (row: { name: string }): string => row.name,\n    },\n    {\n      name: <Text id=\"table.links\">Links</Text>,\n      width: `calc(${profileImgColumnWidth}px-15%)`,\n      cell: (row: {\n        channelLinks: h.JSX.Element | null;\n      }): h.JSX.Element | null => row.channelLinks,\n    },\n    {\n      name: <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>,\n      width: `calc(${profileImgColumnWidth}px-20%)`,\n      cell: (row: {\n        hasYouTube: boolean;\n        YouTubeSubscriberCount?: number;\n      }): h.JSX.Element | number | null =>\n        row.hasYouTube\n          ? row.YouTubeSubscriberCount ?? (\n              <Text id=\"table.hiddenCount\">hidden</Text>\n            )\n          : null,\n      right: true,\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountSort,\n    },\n    {\n      name: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n      width: `calc(${profileImgColumnWidth}px-20%)`,\n      selector: (row: {\n        hasTwitch: boolean;\n        TwitchFollowerCount: number;\n      }): number | string => (row.hasTwitch ? row.TwitchFollowerCount : ''),\n      right: true,\n      sortable: true,\n    },\n    {\n      name: <Text id=\"table.nationality\">Nationality</Text>,\n      width: `calc(${profileImgColumnWidth}px-15%)`,\n      selector: (row: { nationality?: string }): string =>\n        row.nationality ?? '',\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupMemberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data.filter(\n    (item) =>\n      item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n  );\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    return (\n      <Fragment>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n      </Fragment>\n    );\n  }, [filterName, resetPaginationToggle, props.dictionary]);\n\n  const dataToDisplayData = (e: VTuberData): GroupMemberDisplayData => ({\n    id: e.id,\n    profileImg: ProfileImage({ imgUrl: e.imgUrl }),\n    name: e.name,\n    channelLinks: ChannelLinks({\n      YouTubeId: e.YouTube?.id,\n      TwitchId: e.Twitch?.id,\n    }),\n    hasYouTube: e.YouTube !== undefined,\n    YouTubeSubscriberCount: e.YouTube?.subscriberCount,\n    hasTwitch: e.Twitch !== undefined,\n    TwitchFollowerCount: e.Twitch?.followerCount ?? 0,\n    nationality: e.nationality,\n    activity: e.activity,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroupVTubers(props.groupName).then((res) => {\n      setData(res.data.VTubers.map((e) => dataToDisplayData(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.group\">Group</Text>\n        <span class=\"highlightText\"> {props.groupName} </span>\n        <Text id=\"header.memberList\">members</Text>\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default GroupPage;\n"],"sourceRoot":""}