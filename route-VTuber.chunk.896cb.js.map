{"version":3,"sources":["webpack:///./routes/VTuber/index.tsx"],"names":["VTuberPage","props","_data$name","_data$name2","_useState2","_slicedToArray","useState","data","setData","document","title","concat","name","dictionary","header","getVTuber","_ref","Api","id","then","res","VTuberFullToDisplay","VTuber","apply","arguments","useEffect","h","Fragment","Text","undefined","VTuberInformation","clickBehavior"],"mappings":"+1CA4CeA,UA7B0C,SACvDC,GACG,IAAAC,EAAAC,EACsDC,EAAAC,EAAjCC,cAAiC,GAAlDC,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAEpBK,SAASC,MAAQ,GAAHC,OAAgB,QAAhBT,EAAMK,aAAI,EAAJA,EAAMK,YAAI,IAAAV,IAAI,GAAE,OAAAS,OAAMV,EAAMY,WAAWC,OAAOJ,OAElE,IAAMK,EAAS,e,EAAAC,G,EAAG,kBACVC,IAAchB,EAAMiB,IAAIC,MAAK,SAACC,GAClCZ,EAAQa,YAAoBD,EAAIb,KAAKe,QACvC,GACF,E,+KAAC,kBAJc,OAAAN,EAAAO,MAAA,KAAAC,UAAA,KAUf,OAJAC,aAAU,WACRV,GACF,GAAG,IAGDW,YAAAC,EAAA,KACED,YAAA,UACEA,YAAA,YAAM,IAAY,QAAXvB,EAACI,aAAI,EAAJA,EAAMK,YAAI,IAAAT,IAAIuB,YAACE,IAAI,CAACV,GAAG,gBAAe,cAAkB,WAExDW,IAATtB,EACCmB,YAACI,IAAiB,CAACR,OAAQf,EAAMwB,cAAc,aAC7C,KAGV,C","file":"route-VTuber.chunk.896cb.js","sourcesContent":["import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport '../../style/index.css';\nimport VTuberInformation from '../../components/VTuberInformation';\nimport { VTuberDisplayFullData } from '../../types/TableDisplayData/VTuberDisplayFullData';\nimport { VTuberFullToDisplay } from '../../utils/transform/FullTransform';\nimport { Text } from 'preact-i18n';\n\nexport interface VTuberPageProps {\n  id: string;\n  dictionary: Dictionary;\n}\n\nconst VTuberPage: FunctionalComponent<VTuberPageProps> = (\n  props: VTuberPageProps\n) => {\n  const [data, setData] = useState<VTuberDisplayFullData>();\n\n  document.title = `${data?.name ?? ''} | ${props.dictionary.header.title}`;\n\n  const getVTuber = async (): Promise<void> => {\n    await Api.getVTuber(props.id).then((res) => {\n      setData(VTuberFullToDisplay(res.data.VTuber));\n    });\n  };\n\n  useEffect(() => {\n    getVTuber();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <span> {data?.name ?? <Text id=\"text.loading\">Loading...</Text>} </span>\n      </h1>\n      {data !== undefined ? (\n        <VTuberInformation VTuber={data} clickBehavior=\"noAction\" />\n      ) : null}\n    </>\n  );\n};\n\nexport default VTuberPage;\n"],"sourceRoot":""}