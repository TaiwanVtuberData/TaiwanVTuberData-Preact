{"version":3,"sources":["webpack:///./tableTypes/GraduateDateColumn.tsx","webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./utils/transform/GraduateTransform.ts","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./style/IsTodayRowStyles.ts","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./routes/GraduateVTubers/index.tsx","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["GraduateDateColumn","name","id","selector","row","graduateDate","YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","cell","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","VTuberGraduateToDisplay","e","todayDate","VTuberBasicToDisplay","isToday","ProfileImagePopup","ProfileImage","clickBehavior","YouTubeTwitchCountColumn","NationalityColumn","nationality","SearchBar","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","IsTodayRowStyle","ToolTip","children","width","fontSize","text","tag","count","a","b","PopularVideoColumn","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower","GraduateVTubersPage","document","title","dictionary","header","graduateVTubers","sortable","sortFunction","setData","useState","filterDate","setFilterDate","filterName","setFilterName","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByDate","target","searchByDisplayName","searchByGroup","pending","setPending","useEffect","async","getISODateString","Date","Api","then","res","VTubers","map","sort","localeCompare","getVTubers","concat","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","QuestionMarkToolTip"],"mappings":"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","file":"route-GraduateVTubers.chunk.1761c.esm.js","sourcesContent":["import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface GraduateDateColumnRowData {\n  graduateDate: string;\n}\n\nexport const GraduateDateColumn = <\n  RowData extends GraduateDateColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.graduateDate\">Graduation Date</Text>,\n    selector: (row: { graduateDate: string }): string => row.graduateDate,\n  };\n};\n","import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import { VTuberGraduateData } from '../../types/ApiData/VTuberGraduateData';\nimport { VTuberGraduateDisplayData } from '../../types/TableDisplayData/VTuberGraduateDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const VTuberGraduateToDisplay = (\n  e: VTuberGraduateData,\n  todayDate: string\n): VTuberGraduateDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  graduateDate: e.graduateDate,\n  isToday: e.graduateDate === todayDate,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","const IsTodayRowStyle = [\n  {\n    when: (row: { isToday: boolean }): boolean => row.isToday,\n    style: {\n      color: 'mediumblue',\n    },\n  },\n];\n\nexport default IsTodayRowStyle;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport IsTodayRowStyle from '../../style/IsTodayRowStyles';\nimport { GraduateDateColumn } from '../../tableTypes/GraduateDateColumn';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberGraduateDisplayData } from '../../types/TableDisplayData/VTuberGraduateDisplayData';\nimport { getISODateString } from '../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort } from '../../utils/sort/SubscriberCountSort';\nimport { VTuberGraduateToDisplay } from '../../utils/transform/GraduateTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\n\nexport interface GraduateVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst GraduateVTubersPage: FunctionalComponent<GraduateVTubersPageProps> = (\n  props: GraduateVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.graduateVTubers} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<VTuberGraduateDisplayData>> = [\n    {\n      ...GraduateDateColumn(),\n      sortable: true,\n    },\n    NameColumn(),\n    {\n      ...YouTubeTwitchCountColumn(),\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort,\n    },\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberGraduateDisplayData>>([]);\n  const [filterDate, setFilterDate] = useState<string>('');\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.graduateDate &&\n        item.graduateDate.toLowerCase().includes(filterDate.toLowerCase())\n    )\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (filterGroup === '') return true;\n      if (item.group === undefined) return false;\n      return item.group.toLowerCase().includes(filterGroup.toLowerCase());\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearDate = (): void => {\n      if (filterDate) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterDate('');\n      }\n    };\n\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDate}\n          onFilter={(e: any): void => setFilterDate(e.target.value)}\n          onClear={handleClearDate}\n          filterText={filterDate}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </div>\n    );\n  }, [\n    filterDate,\n    filterName,\n    filterGroup,\n    resetPaginationToggle,\n    props.dictionary,\n  ]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    const todayDate: string = getISODateString(new Date(), 8);\n    await Api.getGraduateVTubers('recent').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .sort((a, b) => b.graduateDate.localeCompare(a.graduateDate))\n          .map((e) => VTuberGraduateToDisplay(e, todayDate))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.graduateVTubers\">Graduate VTubers</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.graduateVTubers\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        // Typescript does not accept concat two array of different types\n        conditionalRowStyles={ActivityRowStyles.concat(\n          IsTodayRowStyle as Array<any>\n        )}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default GraduateVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}