{"version":3,"sources":["webpack:///./tableTypes/VideoColumn.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/Livestreams/index.tsx","webpack:///./style/DataTableStyle.module.css","webpack:///./utils/transform/LivestreamTransform.ts"],"names":["VideoColumn","name","h","Text","id","cell","row","VideoLink","thumbnailUrl","videoUrl","ProfileImagePopup","props","class","style","ProfileImage","VTuberId","imgUrl","clickBehavior","SearchBar","_props$filterText","type","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","undefined","debutInfo","hasDebutInfo","isRecentlyDebut","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","Fragment","LivestreamsPage","document","title","dictionary","header","livestreaming","_objectSpread","width","selector","getFormattedDateTime","startTime","sortable","wrap","_row$title","hide","Media","SM","setData","useState","filterName","setFilterName","filterTitle","setFilterTitle","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByDisplayName","e","target","handleClearName","searchByTitle","handleClearTitle","pending","setPending","useEffect","async","Api","then","res","arrayData","livestreams","map","index","LivestreamToDisplayData","sort","a","b","getTime","setTimeout","_document$getElementB","currentTime","Date","setHours","getHours","closestToNow","findClosestSortedDateIndex","getElementById","Math","max","scrollIntoView","behavior","getLivestreams","DataTable","_extends","customStyles","rows","height","headCells","paddingLeft","paddingRight","cells","fixedHeader","progressComponent","progressPending","subHeader","subHeaderComponent"],"mappings":"8FAAA,0EAUO,MAAMA,EAAcA,KAGlB,CACLC,KAAMC,YAACC,IAAI,CAACC,GAAG,eAAc,SAC7BC,KAAOC,GACLC,YAAU,CACRC,aAAcF,EAAIE,aAClBC,SAAUH,EAAIG,Y,gECjBP,EAAa,mBAAb,EAAmD,0BAAnD,EAAwF,kBC0BxFC,IAhBbC,GAGET,YAAA,OAAKU,MAAOC,GACVX,YAAA,OAAKU,MAAOC,GACVX,YAACY,IAAY,CACXC,SAAUJ,EAAMI,SAChBC,OAAQL,EAAMK,OACdC,cAAc,WAGlBf,YAAA,QAAMU,MAAOC,GAAiBF,EAAMV,M,oDCrB3B,EAAa,mBAAb,EAA4C,mBAA5C,EAAwE,gBC2BxEiB,IAjBbP,IAAqB,IAAAQ,EAAA,OAErBjB,YAAA,OAAKU,MAAOC,GACVX,YAAA,SACEkB,KAAK,OACLR,MAAOC,EACPQ,YAAaV,EAAMW,gBACnBC,MAAuB,QAAlBJ,EAAER,EAAMa,kBAAU,IAAAL,IAAI,GAC3BM,SAAUd,EAAMe,WAGlBxB,YAAA,UAAQkB,KAAK,SAASR,MAAOC,EAAcc,QAAShB,EAAMiB,SAAS,KAG/D,C,kCCcOC,IApCW,CACxB,CACEC,KAAOxB,GACY,cAAjBA,EAAIyB,SACNlB,MAAO,CACLmB,gBAAiB,2BACjB,UAAW,CACTC,OAAQ,aAId,CACEH,KAAOxB,GACY,WAAjBA,EAAIyB,eACcG,IAAlB5B,EAAI6B,YAC2B,IAA/B7B,EAAI6B,UAAUC,eACoB,IAAlC9B,EAAI6B,UAAUE,gBAChBxB,MAAO,CACLmB,gBAAiB,2BACjB,UAAW,CACTC,OAAQ,aAId,CACEH,KAAOxB,GAA0D,aAAjBA,EAAIyB,SACpDlB,MAAO,CACLmB,gBAAiB,2BACjBM,MAAO,QACP,UAAW,CACTL,OAAQ,iB,oCChChB,gBAYeM,IAReA,KAAA,CAG5BC,QAAS,GACTC,KAAM,GACNC,qBAAsBb,K,qCCVxB,sFAKO,MAAMc,EAA4BA,KACvC,MAAMC,EACJC,cAEF,OAAQD,GACN,IAAK,KACL,IAAK,KACL,IAAK,KACH,OACE1C,YAAA4C,EAAA,KACG,IAAI,IACJ5C,YAACC,IAAI,CAACC,GAAG,oBAAmB,iBAC7BF,YAACC,IAAI,CAACC,GAAK,oBAAmBwC,KAAuB,eAE7C,IAAI,WAKlB,QACE,OAAO,KACX,C,k+CCiKaG,UA/JbpC,IAEAqC,SAASC,MAAS,GAAEtC,EAAMuC,WAAWC,OAAOC,mBAAmBzC,EAAMuC,WAAWC,OAAOF,QAEvF,MAAMT,EAAqD,CACzD,CACEvC,KAAMC,YAACC,IAAI,CAACC,GAAG,qBAAoB,QACnCC,KAAOC,GAKLJ,YAACQ,IAAiB,CAChBK,SAAUT,EAAIS,SACdC,OAAQV,EAAIU,OACZf,KAAMK,EAAIL,QAGfoD,IAAA,GAEIrD,eAAa,IAChBsD,MAAO,UAET,CACErD,KAAMC,YAACC,IAAI,CAACC,GAAG,mBAAkB,cACjCmD,SAAWjD,GACTkD,YAAqBlD,EAAImD,WAC3BC,UAAU,EACVC,MAAM,GAER,CACE1D,KAAMC,YAACC,IAAI,CAACC,GAAG,eAAc,SAC7BmD,SAAWjD,IAAuB,IAAAsD,EAAA,OAAsB,QAAtBA,EAAatD,EAAI2C,aAAK,IAAAW,IAAI,EAAE,EAC9DD,MAAM,EACNE,KAAMC,IAAMC,MAKTtB,EAAMuB,GAAWC,YAAuC,KACxDC,EAAYC,GAAiBF,YAAiB,KAC9CG,EAAaC,GAAkBJ,YAAiB,KAChDK,EAAuBC,GAC5BN,aAAkB,GACdO,EAAe/B,EAClBgC,QACEC,GACCA,EAAKzE,MAAQyE,EAAKzE,KAAK0E,cAAcC,SAASV,EAAWS,iBAE5DF,QAAQC,QACYxC,IAAfwC,EAAKzB,OACFyB,EAAKzB,MAAM0B,cAAcC,SAASR,EAAYO,iBAGnDE,EAAqBC,aAAQ,IAgB/B5E,YAAA,OAAKU,MAAOmE,IAAWC,gBACrB9E,YAACgB,IAAS,CACRI,gBAAiBX,EAAMuC,WAAW+B,MAAMC,oBACxCxD,SAAWyD,GAAiBhB,EAAcgB,EAAEC,OAAO7D,OACnDK,QAnBkByD,KAClBnB,IACFK,GAA0BD,GAC1BH,EAAc,IAChB,EAgBI3C,WAAY0C,IAEdhE,YAACgB,IAAS,CACRI,gBAAiBX,EAAMuC,WAAW+B,MAAMK,cACxC5D,SAAWyD,GAAiBd,EAAec,EAAEC,OAAO7D,OACpDK,QAlBmB2D,KACnBnB,IACFG,GAA0BD,GAC1BD,EAAe,IACjB,EAeI7C,WAAY4C,MAIjB,CAACF,EAAYE,EAAaE,EAAuB3D,EAAMuC,cACnDsC,EAASC,GAAcxB,aAAS,GA4BvCyB,aAAU,KA1BaC,iBACfC,IAAmB,OAAOC,MAAMC,IACpC,MAAMC,EAA0CD,EAAIrD,KAAKuD,YACtDC,KAAKd,GAAMA,IACXc,KAAI,CAACd,EAAGe,IAAUC,YAAwBhB,EAAGe,KAE7CE,MAAK,CAACC,EAAGC,IAAMD,EAAE5C,UAAU8C,UAAYD,EAAE7C,UAAU8C,YAEtDvC,EAAQ+B,GACRN,GAAW,GAGXe,YAAW,KAAM,IAAAC,EAEf,MAAMC,EAAc,IAAIC,KACxBD,EAAYE,SAASF,EAAYG,WAAa,GAC9C,MAAMC,EAAeC,YAA2BhB,EAAWW,GAIF,QADzDD,EAAAzD,SACGgE,eAAgB,OAAMC,KAAKC,IAAI,EAAGJ,EAAe,aAAK,IAAAL,GADzDA,EAEIU,eAAe,CAAEC,SAAU,UAAW,GACzC,IAAI,GACP,EAIFC,EAAgB,GACf,IAsBH,OACEnH,YAAA4C,EAAA,KACE5C,YAAA,UACEA,YAACC,IAAI,CAACC,GAAG,wBAAuB,iBAC/BuC,eAEHzC,YAACoH,IAASC,EAAA,GACJhF,IAAqB,CACzBC,QAASA,EACTC,KAAM+B,EACNgD,aA9B4B,CAChCC,KAAM,CACJ5G,MAAO,CACL6G,OAAQ,UAGZC,UAAW,CACT9G,MAAO,CACL+G,YAAa,MACbC,aAAc,QAGlBC,MAAO,CACLjH,MAAO,CACL+G,YAAa,MACbC,aAAc,SAgBdE,aAAW,EACXC,kBAAmB9H,YAACC,IAAI,CAACC,GAAG,gBAAe,cAC3C6H,gBAAiBzC,EACjB0C,WAAS,EACTC,mBAAoBtD,KAErB,C,iECtLQ,KAAC,eAAiB,2B,oCCEjC,kCAAO,MAAMsB,EAA0BA,CACrChB,EACAe,KAAa,CAEb9F,GAAI8F,EACJnF,SAAUoE,EAAE/E,GACZH,KAAMkF,EAAElF,KACRe,OAAQmE,EAAEnE,OACViC,MAAOkC,EAAElC,MACTzC,aAAc2E,EAAE3E,aAChBC,SAAU0E,EAAE1E,SACZgD,UAAW,IAAIkD,KAAKxB,EAAE1B,Y","file":"route-Livestreams.chunk.2615a.esm.js","sourcesContent":["import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport VideoLink from '../components/VideoLink';\n\nexport interface VideoColumnRowData {\n  thumbnailUrl: string;\n  videoUrl: string;\n}\n\nexport const VideoColumn = <\n  RowData extends VideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.video\">Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      VideoLink({\n        thumbnailUrl: row.thumbnailUrl,\n        videoUrl: row.videoUrl,\n      }),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, {\n  Media,\n  TableColumn,\n  TableStyles,\n} from 'react-data-table-component';\nimport ProfileImagePopup from '../../components/ProfileImagePopup';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { VideoColumn } from '../../tableTypes/VideoColumn';\nimport { LivestreamDisplayData } from '../../types/TableDisplayData/LivestreamDisplayData';\nimport {\n  findClosestSortedDateIndex,\n  getFormattedDateTime,\n} from '../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { LivestreamToDisplayData } from '../../utils/transform/LivestreamTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\n\nexport interface LivestreamsPageProps {\n  dictionary: Dictionary;\n}\n\nconst LivestreamsPage: FunctionalComponent<LivestreamsPageProps> = (\n  props: LivestreamsPageProps\n) => {\n  document.title = `${props.dictionary.header.livestreaming} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<LivestreamDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      cell: (row: {\n        VTuberId: string;\n        imgUrl?: string;\n        name: string;\n      }): JSX.Element => (\n        <ProfileImagePopup\n          VTuberId={row.VTuberId}\n          imgUrl={row.imgUrl}\n          name={row.name}\n        />\n      ),\n    },\n    {\n      ...VideoColumn(),\n      width: '200px',\n    },\n    {\n      name: <Text id=\"table.startTime\">Start Time</Text>,\n      selector: (row: { startTime: Date }): string =>\n        getFormattedDateTime(row.startTime),\n      sortable: true,\n      wrap: true,\n    },\n    {\n      name: <Text id=\"table.title\">Title</Text>,\n      selector: (row: { title?: string }): string => row.title ?? '',\n      wrap: true,\n      hide: Media.SM,\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<LivestreamDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterTitle, setFilterTitle] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (item.title === undefined) return true;\n      return item.title.toLowerCase().includes(filterTitle.toLowerCase());\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearTitle = (): void => {\n      if (filterTitle) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterTitle('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByTitle}\n          onFilter={(e: any): void => setFilterTitle(e.target.value)}\n          onClear={handleClearTitle}\n          filterText={filterTitle}\n        />\n      </div>\n    );\n  }, [filterName, filterTitle, resetPaginationToggle, props.dictionary]);\n  const [pending, setPending] = useState(true);\n\n  const getLivestreams = async (): Promise<void> => {\n    await Api.getLivestreams('all').then((res) => {\n      const arrayData: Array<LivestreamDisplayData> = res.data.livestreams\n        .map((e) => e)\n        .map((e, index) => LivestreamToDisplayData(e, index))\n        // what a great Date API, thanks javascript\n        .sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n      // thanks to JavaScript sorting being mutable, I have to convert ReadonlyArray to Array first\n      setData(arrayData);\n      setPending(false);\n\n      // TODO: this is a hack to find the closest livestream\n      setTimeout(() => {\n        // Note: document.getElementById('row-{index}') only work because array data id is set to their index\n        const currentTime = new Date();\n        currentTime.setHours(currentTime.getHours() - 1);\n        const closestToNow = findClosestSortedDateIndex(arrayData, currentTime);\n\n        // scroll to best row - 1 because the header will block the full view of best row\n        document\n          .getElementById(`row-${Math.max(0, closestToNow - 1)}`)\n          ?.scrollIntoView({ behavior: 'smooth' });\n      }, 500);\n    });\n  };\n\n  useEffect(() => {\n    getLivestreams();\n  }, []);\n\n  const customStyles: TableStyles = {\n    rows: {\n      style: {\n        height: '120px', // fix row height so scrolling won't be affected by image not rendered\n      },\n    },\n    headCells: {\n      style: {\n        paddingLeft: '5px', // override the cell padding for head cells\n        paddingRight: '5px',\n      },\n    },\n    cells: {\n      style: {\n        paddingLeft: '5px', // override the cell padding for data cells\n        paddingRight: '5px',\n      },\n    },\n  };\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.livestreaming\">Streaming Now</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        customStyles={customStyles}\n        fixedHeader\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default LivestreamsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","import { LivestreamData } from '../../types/ApiData/LivestreamData';\nimport { LivestreamDisplayData } from '../../types/TableDisplayData/LivestreamDisplayData';\n\nexport const LivestreamToDisplayData = (\n  e: LivestreamData,\n  index: number\n): LivestreamDisplayData => ({\n  id: index,\n  VTuberId: e.id,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  title: e.title,\n  thumbnailUrl: e.thumbnailUrl,\n  videoUrl: e.videoUrl,\n  startTime: new Date(e.startTime),\n});\n"],"sourceRoot":""}