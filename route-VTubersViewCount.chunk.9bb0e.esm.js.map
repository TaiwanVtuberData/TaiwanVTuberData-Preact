{"version":3,"sources":["webpack:///./style/CompactTableStyle.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./routes/VTubersViewCount/index.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./utils/NumberUtils.ts","webpack:///./components/DropDownList/style.module.css","webpack:///./components/DropDownList/index.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./utils/FilterModelHelper.ts","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./components/FilterWindow/style.module.css","webpack:///./components/FilterWindow/index.tsx","webpack:///./utils/StringUtils.ts","webpack:///./utils/transform/ViewCountTransform.ts","webpack:///./tableTypes/RankingColumn.tsx","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./style/DataTableStyle.module.css"],"names":["CompactTableStyle","headCells","style","paddingLeft","paddingRight","cells","NameColumn","name","id","cell","row","VTuberId","imgUrl","VTubersViewCountPage","props","document","title","dictionary","header","VTubersViewCount","columns","RankingColumn","sortable","width","selector","totalViewCount","compact","GrowthDisplayDataToString","_7DaysGrowth","table","right","_30DaysGrowth","PopularVideoColumn","GroupColumn","NationalityColumn","data","setData","useState","filterModel","setFilterModel","YouTubeId","TwitchId","group","nationality","filteredData","filter","e","filterFunction","searchBarComponent","useMemo","optionValue","option","value","fieldPlaceHolderMappings","Map","searchByDisplayName","searchByYouTubeId","searchByTwitchId","searchByGroup","searchByNationality","class","tableStyle","searchBarGroup","tipText","sortingMethod","modifier","onChange","GoToPage","type","viewCountSortOrder","target","openSearchText","text","openSearch","closeSearchText","closeSearch","pending","setPending","_7DaysDescendingSort","rowA","rowB","YouTube","diff","_30DaysDescendingSort","getVTubers","async","Api","sortBy","count","then","res","VTubers","map","sort","GetSortingMethod","index","VTuberViewCountToDisplay","useEffect","GetCurrentNationalitySpan","DefaultDataTableProps","conditionalRowStyles","ActivityRowStyles","customStyles","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","undefined","href","GetRoute","ProfileImagePopup","ProfileImage","clickBehavior","PrependSign","valueToPercentString","toFixed","tableTranslation","percentage","recordType","noRecord","atLeast","DropDownList","dropDownStyle","dropDown","key","targetModel","Object","entries","entry","toLowerCase","includes","some","SearchBar","placeholder","placeholderText","filterText","onFilter","onClick","onClear","when","activity","backgroundColor","cursor","color","nationalityModifier","getNationalityModifierState","FilterWindow","isOpened","setIsOpened","setFilter","createSearchBar","keyTyped","handleOnFilterChange","nullableString","trimmed","trim","trimOrNullOnEmpty","handleOnChange","get","fields","keys","ranking","Twitch","popularVideo","wrap"],"mappings":"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","file":"route-VTubersViewCount.chunk.9bb0e.esm.js","sourcesContent":["import { TableStyles } from 'react-data-table-component';\n\nexport const CompactTableStyle: TableStyles = {\n  headCells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for head cells\n      paddingRight: '5px',\n    },\n  },\n  cells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for data cells\n      paddingRight: '5px',\n    },\n  },\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport DropDownList from '../../components/DropDownList';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { CompactTableStyle } from '../../style/CompactTableStyle';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { RankingColumn } from '../../tableTypes/RankingColumn';\nimport { GrowthData } from '../../types/Common/GrowthData';\nimport { YouTubeViewCountGrowthData } from '../../types/Common/YouTube/YouTubeViewCountGrowthData';\nimport { VTuberViewCountGrowthDisplayData } from '../../types/TableDisplayData/VTuberViewCountGrowthDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { GrowthDisplayDataToString } from '../../utils/NumberUtils';\nimport { VTuberViewCountToDisplay } from '../../utils/transform/ViewCountTransform';\nimport { GoToPage } from '../../utils/TypeSafeRouting';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { SortOrder } from '../../types/ApiTypes';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport { VTuberViewCountGrowthDisplayDataFilterModel } from '../../types/FilterType/VTuberViewCountGrowthDisplayDataFilterModel';\nimport FilterWindow from '../../components/FilterWindow';\nimport { filterFunction } from '../../utils/FilterModelHelper';\n\nexport interface VTubersViewCountPageProps {\n  dictionary: Dictionary;\n  modifier: SortOrder;\n}\n\nconst VTubersViewCountPage: FunctionalComponent<VTubersViewCountPageProps> = (\n  props: VTubersViewCountPageProps\n) => {\n  document.title = `${props.dictionary.header.VTubersViewCount} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<VTuberViewCountGrowthDisplayData>> = [\n    {\n      ...RankingColumn(),\n      sortable: true,\n      width: '40px',\n    },\n    {\n      ...NameColumn(),\n      width: '200px',\n    },\n    {\n      name: (\n        <Text id=\"table.YouTubeTotalViewCount\">YouTube Total View Count</Text>\n      ),\n      selector: (row: { totalViewCount: number }): number => row.totalViewCount,\n      compact: true,\n      sortable: true,\n    },\n    {\n      name: <Text id=\"table._7DaysViewCountGrowth\">7 Days Growth</Text>,\n      cell: (row: { _7DaysGrowth: GrowthData }): string =>\n        GrowthDisplayDataToString(row._7DaysGrowth, props.dictionary.table),\n      compact: true,\n      right: true,\n    },\n    {\n      name: <Text id=\"table._30DaysViewCountGrowth\">30 Days Growth</Text>,\n      cell: (row: { _30DaysGrowth: GrowthData }): string =>\n        GrowthDisplayDataToString(row._30DaysGrowth, props.dictionary.table),\n      compact: true,\n      right: true,\n    },\n    {\n      ...PopularVideoColumn(),\n      width: '100px',\n    },\n    {\n      ...GroupColumn(),\n      width: '150px',\n    },\n    {\n      ...NationalityColumn(),\n      width: '125px',\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberViewCountGrowthDisplayData>>([]);\n  const [filterModel, setFilterModel] =\n    useState<VTuberViewCountGrowthDisplayDataFilterModel>({\n      name: null,\n      YouTubeId: null,\n      TwitchId: null,\n      group: null,\n      nationality: null,\n    });\n  const filteredData = data.filter((e) => filterFunction(e, filterModel));\n\n  const searchBarComponent = useMemo(() => {\n    const optionValue: Array<{\n      option: h.JSX.Element;\n      value: SortOrder;\n    }> = [\n      {\n        option: <Text id=\"table._7DaysViewCountGrowth\">7 Days Growth</Text>,\n        value: '7-days',\n      },\n      {\n        option: <Text id=\"table._30DaysViewCountGrowth\">30 Days Growth</Text>,\n        value: '30-days',\n      },\n    ];\n\n    const handleFilterWindow = (\n      filterModel: VTuberViewCountGrowthDisplayDataFilterModel\n    ): void => {\n      setFilterModel(filterModel);\n    };\n\n    const fieldPlaceHolderMappings: Map<string, string> = new Map<\n      string,\n      string\n    >([\n      ['name', props.dictionary.table.searchByDisplayName],\n      ['YouTubeId', props.dictionary.table.searchByYouTubeId],\n      ['TwitchId', props.dictionary.table.searchByTwitchId],\n      ['group', props.dictionary.table.searchByGroup],\n      ['nationality', props.dictionary.table.searchByNationality],\n    ]);\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <DropDownList\n          tipText={props.dictionary.table.sortingMethod}\n          value={props.modifier}\n          optionValue={optionValue}\n          onChange={(e: any) =>\n            GoToPage({\n              type: 'vtubers-view-count',\n              viewCountSortOrder: e.target.value,\n            })\n          }\n        />\n        <FilterWindow\n          filterModel={filterModel}\n          fieldPlaceHolderMappings={fieldPlaceHolderMappings}\n          openSearchText={props.dictionary.text.openSearch}\n          closeSearchText={props.dictionary.text.closeSearch}\n          onChange={handleFilterWindow}\n        />\n      </div>\n    );\n  }, [filterModel, props.modifier, props.dictionary]);\n  const [pending, setPending] = useState(true);\n\n  const _7DaysDescendingSort = <\n    T extends { YouTube: YouTubeViewCountGrowthData }\n  >(\n    rowA: T,\n    rowB: T\n  ): number => {\n    return rowB.YouTube._7DaysGrowth.diff - rowA.YouTube._7DaysGrowth.diff;\n  };\n\n  const _30DaysDescendingSort = <\n    T extends { YouTube: YouTubeViewCountGrowthData }\n  >(\n    rowA: T,\n    rowB: T\n  ): number => {\n    return rowB.YouTube._30DaysGrowth.diff - rowA.YouTube._30DaysGrowth.diff;\n  };\n\n  const GetSortingMethod = (sortBy: SortOrder) => {\n    switch (sortBy) {\n      case '7-days':\n        return _7DaysDescendingSort;\n      case '30-days':\n        return _30DaysDescendingSort;\n    }\n  };\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubersViewCountChange({\n      sortBy: props.modifier,\n      count: '100',\n    }).then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .map((e) => e)\n          .sort(GetSortingMethod(props.modifier))\n          .map((e, index) => VTuberViewCountToDisplay(e, index + 1))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.VTubersViewCount\">VTubers View Count Change</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        customStyles={CompactTableStyle}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default VTubersViewCountPage;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { GrowthRecordType } from '../types/Common/GrowthData';\n\nexport const PrependSign = (value: number): string => {\n  if (value > 0) return `+${value}`;\n  if (value < 0) return `${value}`;\n\n  return '0';\n};\n\nconst valueToPercentString = (value: number): string =>\n  (value * 100).toFixed(2);\n\nexport const GrowthDisplayDataToString = (\n  e: { diff: number; recordType: GrowthRecordType; percentage?: number },\n  tableTranslation: { noRecord: string; atLeast: string }\n): string => {\n  if (e.percentage) {\n    switch (e.recordType) {\n      case 'none':\n        return tableTranslation.noRecord;\n      case 'partial':\n        return `${tableTranslation.atLeast} ${PrependSign(\n          e.diff\n        )} (${valueToPercentString(e.percentage as number)}%)`;\n      case 'full':\n        return `${PrependSign(e.diff)} (${valueToPercentString(\n          e.percentage\n        )}%)`;\n    }\n  }\n\n  switch (e.recordType) {\n    case 'none':\n      return tableTranslation.noRecord;\n    case 'partial':\n      return `${tableTranslation.atLeast} ${PrependSign(e.diff)}`;\n    case 'full':\n      return `${PrependSign(e.diff)}`;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tipText\":\"tipText__4DHD3\"};","import { h } from 'preact';\nimport style from './style.module.css';\nimport dropDownStyle from '../../style/DropDownStyle.module.css';\n\nexport interface DropDownListProps<ValueType> {\n  tipText?: string;\n  optionValue?: Array<{ option: any; value: ValueType }>;\n  value?: ValueType;\n  onChange?: (e: unknown) => unknown;\n}\n\nfunction DropDownList<ValueType extends string | number>(\n  props: DropDownListProps<ValueType>\n): h.JSX.Element {\n  return (\n    <div>\n      <span class={style.tipText}>{props.tipText}</span>\n      <select\n        class={dropDownStyle.dropDown}\n        value={props.value}\n        onChange={props.onChange}\n      >\n        {props.optionValue !== undefined\n          ? props.optionValue.map((e) => (\n              <option key={e.value} value={e.value}>\n                {e.option}\n              </option>\n            ))\n          : null}\n      </select>\n    </div>\n  );\n}\n\nexport default DropDownList;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","export function filterFunction<\n  TargetType extends object,\n  FilterModel extends object\n>(targetModel: TargetType, filterModel: FilterModel): boolean {\n  const result = Object.entries(filterModel).map((entry) => {\n    const keyTyped = entry[0] as keyof typeof targetModel;\n    const target = targetModel[keyTyped] as string | undefined | null;\n\n    const filter = entry[1] as string | null;\n\n    // if there is no filter applied\n    if (filter === null) {\n      return true;\n    }\n\n    // if target doesn't exist\n    if (target === null || target === undefined || target === '') {\n      return false;\n    }\n\n    return target.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const someFilterNotMatch = result.some((e) => e === false);\n\n  return !someFilterNotMatch;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"floating\":\"floating__uhu4Y\",\"floatingHidden\":\"floatingHidden__mvSUQ\",\"floatingShowing\":\"floatingShowing__nwzm5\"};","import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { trimOrNullOnEmpty } from '../../utils/StringUtils';\nimport SearchBar from '../SearchBar';\nimport style from './style.module.css';\n\nexport interface FilterWindowProps<FilterModel extends object> {\n  filterModel: FilterModel;\n  fieldPlaceHolderMappings: Map<string, string>;\n  openSearchText: string;\n  closeSearchText: string;\n  onChange?: (e: FilterModel) => void;\n}\n\nfunction FilterWindow<FilterModel extends object>(\n  props: FilterWindowProps<FilterModel>\n): JSX.Element {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [filter, setFilter] = useState<FilterModel>(props.filterModel);\n\n  function handleOnChange(e: FilterModel): void {\n    if (props.onChange != null) {\n      props.onChange(e);\n    }\n  }\n\n  const createSearchBar = (key: string): JSX.Element => {\n    {\n      const keyTyped = key as keyof typeof filter;\n\n      const handleOnFilterChange = (e: string | null): void => {\n        const nullableString: string | null = trimOrNullOnEmpty(e);\n\n        setFilter({ ...filter, [keyTyped]: nullableString });\n        handleOnChange({ ...filter, [keyTyped]: nullableString });\n      };\n\n      return (\n        <SearchBar\n          key={key}\n          placeholderText={props.fieldPlaceHolderMappings.get(\n            keyTyped as string\n          )}\n          filterText={filter[keyTyped] as string | null}\n          onFilter={(e: any): void => handleOnFilterChange(e.target.value)}\n          onClear={(): void => handleOnFilterChange(null)}\n        />\n      );\n    }\n  };\n\n  const fields: Array<JSX.Element> = Object.keys(props.filterModel).map((key) =>\n    createSearchBar(key)\n  );\n\n  const ToggleButton = (): JSX.Element => (\n    <input\n      type=\"button\"\n      value={isOpened === true ? props.closeSearchText : props.openSearchText}\n      onClick={(): void => setIsOpened(!isOpened)}\n    />\n  );\n\n  const toggleFloatingClass = (): string => {\n    if (isOpened) return `${style.floating} ${style.floatingShowing}`;\n    else return `${style.floating} ${style.floatingHidden}`;\n  };\n\n  return (\n    <div>\n      <ToggleButton />\n      {isOpened === true ? (\n        <div class={toggleFloatingClass()}>{fields}</div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default FilterWindow;\n","export function trimOrNullOnEmpty(\n  value: string | null | undefined\n): string | null {\n  if (value === null || value === undefined) return null;\n\n  const trimmed = value.trim();\n\n  if (trimmed === '') return null;\n\n  return trimmed;\n}\n","import { VTuberViewCountGrowthData } from '../../types/ApiData/VTuberViewCountChangeData';\nimport { VTuberViewCountGrowthDisplayData } from '../../types/TableDisplayData/VTuberViewCountGrowthDisplayData';\n\nexport const VTuberViewCountToDisplay = (\n  e: VTuberViewCountGrowthData,\n  ranking: number\n): VTuberViewCountGrowthDisplayData => ({\n  id: e.id,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube.id,\n  TwitchId: e.Twitch?.id,\n  totalViewCount: e.YouTube.totalViewCount,\n  _7DaysGrowth: e.YouTube._7DaysGrowth,\n  _30DaysGrowth: e.YouTube._30DaysGrowth,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n  activity: e.activity,\n  ranking: ranking,\n});\n","import { TableColumn } from 'react-data-table-component';\n\nexport interface RankingColumnRowData {\n  ranking: number;\n}\n\nexport const RankingColumn = <\n  RowData extends RankingColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: '#',\n    selector: (row: RowData): number => row.ranking,\n    wrap: false,\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}