{"version":3,"sources":["webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./routes/AllVTubers/index.tsx","webpack:///./components/DropDownList/style.module.css","webpack:///./components/DropDownList/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","ProfileImagePopup","props","class","style","ProfileImage","VTuberId","imgUrl","name","NameColumn","id","cell","row","GroupColumn","group","tableStyle","groupLink","href","GetRoute","type","YouTubeTwitchCount","YouTubeSpan","YouTubeCount","CountString","countType","TwitchSpan","TwitchCount","AllVTubersPage","document","title","dictionary","header","allVTubers","useState","setSortMethod","columns","YouTubeTwitchCountColumn","PopularVideoColumn","NationalityColumn","data","setData","filterName","setFilterName","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","sort","searchBarComponent","useMemo","optionValue","option","value","searchBarGroup","tipText","table","sortingMethod","onChange","e","target","placeholderText","searchByDisplayName","onFilter","onClear","filterText","searchByGroup","pending","setPending","getVTubers","Api","then","res","VTubers","map","VTuberBasicToDisplay","useEffect","GetCurrentNationalitySpan","DefaultDataTableProps","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","DropDownList","key","selector","nationality","SearchBar","placeholder","onClick","ActivityRowStyles","when","activity","backgroundColor","cursor","color","conditionalRowStyles","nationalityModifier","getNationalityModifierState","tag","count","a","b","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower"],"mappings":"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","file":"route-AllVTubers.chunk.8b6ed.js","sourcesContent":["import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage VTuberId={props.VTuberId} imgUrl={props.imgUrl} />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\nimport tableStyle from '../style/DataTableStyle.module.css';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a\n          class={tableStyle.groupLink}\n          href={GetRoute({ type: 'group', name: row.group })}\n        >\n          {row.group}\n        </a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport '../../style/index.css';\nimport { CountType } from '../../types/Common/CountType';\nimport CountString from '../CountString';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} YouTubeRed`}>\n        <CountString countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} TwitchPurple`}>\n        <CountString countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport DropDownList from '../../components/DropDownList';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport {\n  SortMethod,\n  SubscriberCountDescendingSort,\n} from '../../utils/sort/SubscriberCountSort';\nimport { VTuberBasicToDisplay } from '../../utils/transform/BasicTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\n\nexport interface AllVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst AllVTubersPage: FunctionalComponent<AllVTubersPageProps> = (\n  props: AllVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.allVTubers} | ${props.dictionary.header.title}`;\n\n  const [sortMethod, setSortMethod] = useState<SortMethod>('YouTube+Twitch');\n\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (filterGroup === '') return true;\n      if (item.group === undefined) return false;\n      return item.group.toLowerCase().includes(filterGroup.toLowerCase());\n    })\n    .sort(SubscriberCountDescendingSort(sortMethod));\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    const optionValue: Array<{\n      option: h.JSX.Element;\n      value: SortMethod;\n    }> = [\n      {\n        option: (\n          <Text id=\"table.YouTubeTwitchCount\">\n            YouTube Subscribers + Twitch Followers\n          </Text>\n        ),\n        value: 'YouTube+Twitch',\n      },\n      {\n        option: (\n          <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>\n        ),\n        value: 'YouTube',\n      },\n      {\n        option: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n        value: 'Twitch',\n      },\n    ];\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <DropDownList\n          tipText={props.dictionary.table.sortingMethod}\n          value={sortMethod}\n          optionValue={optionValue}\n          onChange={(e: any) => setSortMethod(e.target.value)}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </div>\n    );\n  }, [filterName, filterGroup, resetPaginationToggle, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers('all').then((res) => {\n      setData(res.data.VTubers.map((e) => VTuberBasicToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.allVTubers\">All VTubers</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default AllVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"tipText\":\"tipText__4DHD3\",\"dropDown\":\"dropDown__6WU99\"};","import { h } from 'preact';\nimport style from './style.module.css';\n\nexport interface DropDownListProps<ValueType> {\n  tipText?: string;\n  optionValue?: Array<{ option: any; value: ValueType }>;\n  value?: ValueType;\n  onChange?: (e: unknown) => unknown;\n}\n\nfunction DropDownList<ValueType extends string | number>(\n  props: DropDownListProps<ValueType>\n): h.JSX.Element {\n  return (\n    <div>\n      <span class={style.tipText}>{props.tipText}</span>\n      <select\n        class={style.dropDown}\n        value={props.value}\n        onChange={props.onChange}\n      >\n        {props.optionValue !== undefined\n          ? props.optionValue.map((e) => (\n              <option key={e.value} value={e.value}>\n                {e.option}\n              </option>\n            ))\n          : null}\n      </select>\n    </div>\n  );\n}\n\nexport default DropDownList;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"groupLink\":\"x4dKXRdnDI9qgFfe4BsDUQ==\",\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}