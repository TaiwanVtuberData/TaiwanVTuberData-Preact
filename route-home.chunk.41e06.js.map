{"version":3,"sources":["webpack:///./utils/transform/GrowthTransform.ts","webpack:///./style/CompactTableStyle.ts","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/NameColumn.tsx","webpack:///./components/LandingTables/GrowingVTubers/index.tsx","webpack:///./tableTypes/_7DaysGrowthColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./utils/NumberUtils.ts","webpack:///./routes/home/style.module.css","webpack:///./routes/home/index.tsx","webpack:///./tableTypes/PopularityColumn.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./components/LandingTables/TrendingVTubers/index.tsx","webpack:///./utils/sort/PopularityCountSort.ts","webpack:///./style/IsTodayRowStyles.ts","webpack:///./tableTypes/YouTubeSubscriberColumn.tsx","webpack:///./utils/transform/PopularityTransform.ts","webpack:///./components/LandingTables/DebutVTubers/index.tsx","webpack:///./tableTypes/RankingColumn.tsx","webpack:///./utils/transform/DebutTransform.ts","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./components/LandingTables/TopVTubers/index.tsx","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["growthDataToDisplayData","e","subCount","percentage","undefined","diff","VTuberGrowthToDisplay","VTuberBasicToDisplay","YouTubeSubscriber","YouTube","subscriber","_7DaysGrowth","count","_30DaysGrowth","CompactTableStyle","headCells","style","paddingLeft","paddingRight","cells","ProfileImagePopup","props","class","ProfileImage","VTuberId","imgUrl","name","NameColumn","id","cell","row","GrowingVTubersTable","columns","YouTubeSubscriberColumn","_7DaysGrowthColumn","dictionary","table","PopularVideoColumn","useState","data","setData","pending","setPending","getVTubers","Api","then","res","VTubers","map","sort","a","b","useEffect","width","fontSize","text","DefaultDataTableProps","conditionalRowStyles","ActivityRowStyles","customStyles","progressComponent","progressPending","tableTranslation","GrowthDisplayDataToString","YouTubeTwitchCount","YouTubeSpan","YouTubeCount","CountString","countType","TwitchSpan","TwitchCount","PrependSign","value","valueToPercentString","toFixed","recordType","noRecord","atLeast","HomePage","window","document","title","header","GetCurrentNationalitySpan","TrendingVTubers","DebutVTubers","GrowingVTubers","TopVTubers","numberToCountType","popularity","tag","PopularityColumn","YouTubePopularity","TwitchPopularity","YouTubeTwitchCountColumn","TwitchFollower","when","activity","backgroundColor","cursor","color","nationalityModifier","getNationalityModifierState","TrendingVTubersTable","RankingColumn","index","VTuberPopularityToDisplay","PopularityCountDescendingSort","ranking","PopularityCountAscendingSort","rowA","rowB","aCount","bCount","IsTodayRowStyle","isToday","selector","Twitch","DebutVTubersTable","debutDate","todayDate","getISODateString","Date","localeCompare","VTuberDebutToDisplay","concat","wrap","ToolTip","children","popularVideo","YouTubeId","TwitchId","follower","group","nationality","TopVTubersTable","QuestionMarkToolTip"],"mappings":"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","file":"route-home.chunk.41e06.js","sourcesContent":["import { VTuberGrowthData } from '../../types/ApiData/VTuberGrowthData';\nimport { GrowthData } from '../../types/Common/GrowthData';\nimport {\n  GrowthDisplayData,\n  VTuberGrowthDisplayData,\n} from '../../types/TableDisplayData/VTuberGrowthDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nconst growthDataToDisplayData = (\n  e: GrowthData,\n  subCount?: number\n): GrowthDisplayData => ({\n  ...e,\n  percentage: subCount !== undefined && subCount !== 0 ? e.diff / subCount : 0,\n});\n\nexport const VTuberGrowthToDisplay = (\n  e: VTuberGrowthData\n): VTuberGrowthDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  YouTubeSubscriber: e.YouTube.subscriber,\n  _7DaysGrowth: growthDataToDisplayData(\n    e.YouTube._7DaysGrowth,\n    e.YouTube.subscriber.count\n  ),\n  _30DaysGrowth: growthDataToDisplayData(\n    e.YouTube._30DaysGrowth,\n    e.YouTube.subscriber.count\n  ),\n});\n","import { TableStyles } from 'react-data-table-component';\n\nexport const CompactTableStyle: TableStyles = {\n  headCells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for head cells\n      paddingRight: '5px',\n    },\n  },\n  cells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for data cells\n      paddingRight: '5px',\n    },\n  },\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage VTuberId={props.VTuberId} imgUrl={props.imgUrl} />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import * as Api from '../../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { Dictionary } from '../../../i18n/Dictionary';\nimport ActivityRowStyles from '../../../style/ActivityRowStyles';\nimport { CompactTableStyle } from '../../../style/CompactTableStyle';\nimport { NameColumn } from '../../../tableTypes/NameColumn';\nimport { PopularVideoColumn } from '../../../tableTypes/PopularVideoColumn';\nimport { YouTubeSubscriberColumn } from '../../../tableTypes/YouTubeSubscriberColumn';\nimport { _7DaysGrowthColumn } from '../../../tableTypes/_7DaysGrowthColumn';\nimport { VTuberGrowthDisplayData } from '../../../types/TableDisplayData/VTuberGrowthDisplayData';\nimport DefaultDataTableProps from '../../../utils/DefaultDataTableProps';\nimport { VTuberGrowthToDisplay } from '../../../utils/transform/GrowthTransform';\nimport QuestionMarkToolTip from '../../QuestionMarkToolTip';\n\nexport interface GrowingVTubersTableProps {\n  dictionary: Dictionary;\n}\n\nconst GrowingVTubersTable: FunctionalComponent<GrowingVTubersTableProps> = (\n  props: GrowingVTubersTableProps\n) => {\n  const columns: Array<TableColumn<VTuberGrowthDisplayData>> = [\n    NameColumn(),\n    YouTubeSubscriberColumn(),\n    _7DaysGrowthColumn(props.dictionary.table),\n    PopularVideoColumn(),\n  ];\n\n  const [data, setData] = useState<Array<VTuberGrowthDisplayData>>([]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGrowingVTubers('10').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .map((e) => VTuberGrowthToDisplay(e))\n          .sort((a, b) => b._7DaysGrowth.percentage - a._7DaysGrowth.percentage)\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h3>\n        <Text id=\"header.growingVTubers\">Growing VTubers</Text>\n        <> </>\n        <Text id=\"header.top10\">Top 10</Text>\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.growingVTubers\">tooltip text</Text>}\n        />\n      </h3>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={data}\n        conditionalRowStyles={ActivityRowStyles}\n        customStyles={CompactTableStyle}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n      />\n    </>\n  );\n};\n\nexport default GrowingVTubersTable;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GrowthDisplayData } from '../types/TableDisplayData/VTuberGrowthDisplayData';\nimport { GrowthDisplayDataToString } from '../utils/NumberUtils';\n\nexport interface Days7GrowthColumnRowData {\n  _7DaysGrowth: GrowthDisplayData;\n}\n\nexport const _7DaysGrowthColumn = <\n  RowData extends Days7GrowthColumnRowData\n>(tableTranslation: {\n  noRecord: string;\n  atLeast: string;\n}): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table._7DaysGrowth\">7 Days Growth (Percent)</Text>,\n    cell: (row: RowData): string =>\n      GrowthDisplayDataToString(row._7DaysGrowth, tableTranslation),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport '../../style/index.css';\nimport { CountType } from '../../types/Common/CountType';\nimport CountString from '../CountString';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} YouTubeRed`}>\n        <CountString countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} TwitchPurple`}>\n        <CountString countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import { GrowthRecordType } from '../types/Common/GrowthData';\n\nexport const PrependSign = (value: number): string => {\n  if (value > 0) return `+${value}`;\n  if (value < 0) return `${value}`;\n\n  return '0';\n};\n\nconst valueToPercentString = (value: number): string =>\n  (value * 100).toFixed(2);\n\nexport const GrowthDisplayDataToString = (\n  e: { diff: number; recordType: GrowthRecordType; percentage?: number },\n  tableTranslation: { noRecord: string; atLeast: string }\n): string => {\n  if (e.percentage) {\n    switch (e.recordType) {\n      case 'none':\n        return tableTranslation.noRecord;\n      case 'partial':\n        return `${tableTranslation.atLeast} ${PrependSign(\n          e.diff\n        )} (${valueToPercentString(e.percentage as number)}%)`;\n      case 'full':\n        return `${PrependSign(e.diff)} (${valueToPercentString(\n          e.percentage\n        )}%)`;\n    }\n  }\n\n  switch (e.recordType) {\n    case 'none':\n      return tableTranslation.noRecord;\n    case 'partial':\n      return `${tableTranslation.atLeast} ${PrependSign(e.diff)}`;\n    case 'full':\n      return `${PrependSign(e.diff)}`;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tableGrid\":\"tableGrid__Ju0u9\",\"tableItem\":\"tableItem__iikA+\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport DebutVTubersTable from '../../components/LandingTables/DebutVTubers';\nimport GrowingVTubersTable from '../../components/LandingTables/GrowingVTubers';\nimport TopVTubersTable from '../../components/LandingTables/TopVTubers';\nimport TrendingVTubersTable from '../../components/LandingTables/TrendingVTubers';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport '../../style/index.css';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport style from './style.module.css';\n\nexport interface HomePageProps {\n  dictionary: Dictionary;\n}\n\nconst HomePage: FunctionalComponent<HomePageProps> = (props: HomePageProps) => {\n  if (typeof window !== 'undefined') {\n    document.title = `${props.dictionary.header.title}`;\n  }\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.title\">Taiwan VTuber Data</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <div class={style.tableGrid}>\n        <div class={style.tableItem}>\n          <TrendingVTubersTable />\n        </div>\n        <div class={style.tableItem}>\n          <DebutVTubersTable />\n        </div>\n        <div class={style.tableItem}>\n          <GrowingVTubersTable dictionary={props.dictionary} />\n        </div>\n        <div class={style.tableItem}>\n          <TopVTubersTable />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default HomePage;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nconst numberToCountType = (popularity?: number): CountType | undefined => {\n  if (popularity) return { tag: 'has', count: popularity };\n  return undefined;\n};\n\nexport interface PopularityColumnRowData {\n  YouTubePopularity?: number;\n  TwitchPopularity?: number;\n}\n\nexport const PopularityColumn = <\n  RowData extends PopularityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularity\">Popularity</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={numberToCountType(row.YouTubePopularity)}\n        TwitchCount={numberToCountType(row.TwitchPopularity)}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import * as Api from '../../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useEffect, useState } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { CompactTableStyle } from '../../../style/CompactTableStyle';\nimport { NameColumn } from '../../../tableTypes/NameColumn';\nimport { PopularityColumn } from '../../../tableTypes/PopularityColumn';\nimport { YouTubeTwitchCountColumn } from '../../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberPopularityDisplayData } from '../../../types/TableDisplayData/VTuberPopularityDisplayData';\nimport DefaultDataTableProps from '../../../utils/DefaultDataTableProps';\nimport { PopularityCountDescendingSort } from '../../../utils/sort/PopularityCountSort';\nimport { VTuberPopularityToDisplay } from '../../../utils/transform/PopularityTransform';\nimport QuestionMarkToolTip from '../../QuestionMarkToolTip';\nimport { PopularVideoColumn } from '../../../tableTypes/PopularVideoColumn';\nimport { RankingColumn } from '../../../tableTypes/RankingColumn';\nimport ActivityRowStyles from '../../../style/ActivityRowStyles';\n\nconst TrendingVTubersTable: FunctionalComponent = () => {\n  const columns: Array<TableColumn<VTuberPopularityDisplayData>> = [\n    {\n      ...RankingColumn(),\n      width: '30px',\n    },\n    NameColumn(),\n    PopularityColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n  ];\n\n  const [data, setData] = useState<Array<VTuberPopularityDisplayData>>([]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getTrendingVTubers('10').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .map((e, index) => VTuberPopularityToDisplay(e, index + 1))\n          .sort(PopularityCountDescendingSort)\n          .map((e, index) => ({ ...e, ranking: index + 1 }))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h3>\n        <Text id=\"header.trendingVTubers\">Trending VTubers</Text>\n        {/* Yes. Adding a space between two texts require a Fragment */}\n        <> </>\n        <Text id=\"header.top10\">Top 10</Text>\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.trendingVTubers\">tooltip text</Text>}\n        />\n      </h3>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={data}\n        conditionalRowStyles={ActivityRowStyles}\n        customStyles={CompactTableStyle}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n      />\n    </>\n  );\n};\n\nexport default TrendingVTubersTable;\n","export const PopularityCountAscendingSort = <\n  T extends { YouTubePopularity?: number; TwitchPopularity?: number }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount = (rowA.YouTubePopularity ?? 0) + (rowA.TwitchPopularity ?? 0);\n  const bCount = (rowB.YouTubePopularity ?? 0) + (rowB.TwitchPopularity ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\nexport const PopularityCountDescendingSort = <\n  T extends { YouTubePopularity?: number; TwitchPopularity?: number }\n>(\n  rowA: T,\n  rowB: T\n): number => PopularityCountAscendingSort(rowA, rowB) * -1;\n","const IsTodayRowStyle = [\n  {\n    when: (row: { isToday: boolean }): boolean => row.isToday,\n    style: {\n      color: 'mediumblue',\n    },\n  },\n];\n\nexport default IsTodayRowStyle;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { HasCountType } from '../types/Common/CountType';\n\nexport interface YouTubeSubscriberColumnRowData {\n  YouTubeSubscriber: HasCountType;\n}\n\nexport const YouTubeSubscriberColumn = <\n  RowData extends YouTubeSubscriberColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>,\n    selector: (row: RowData): number => row.YouTubeSubscriber.count,\n  };\n};\n","import { VTuberPopularityData } from '../../types/ApiData/VTuberPopularityData';\nimport { VTuberPopularityDisplayData } from '../../types/TableDisplayData/VTuberPopularityDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const VTuberPopularityToDisplay = (\n  e: VTuberPopularityData,\n  ranking: number\n): VTuberPopularityDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  YouTubePopularity: e.YouTube?.popularity,\n  TwitchPopularity: e.Twitch?.popularity,\n  ranking: ranking,\n});\n","import * as Api from '../../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport ActivityRowStyles from '../../../style/ActivityRowStyles';\nimport { CompactTableStyle } from '../../../style/CompactTableStyle';\nimport IsTodayRowStyle from '../../../style/IsTodayRowStyles';\nimport { NameColumn } from '../../../tableTypes/NameColumn';\nimport { PopularVideoColumn } from '../../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDebutDisplayData } from '../../../types/TableDisplayData/VTuberDebutDisplayData';\nimport { getISODateString } from '../../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../../utils/DefaultDataTableProps';\nimport { VTuberDebutToDisplay } from '../../../utils/transform/DebutTransform';\n\nconst DebutVTubersTable: FunctionalComponent = () => {\n  const columns: Array<TableColumn<VTuberDebutDisplayData>> = [\n    {\n      name: <Text id=\"table.debutDate\">Debut Date</Text>,\n      selector: (row: { debutDate: string }): string => row.debutDate,\n      width: '100px',\n    },\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDebutDisplayData>>([]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    const todayDate: string = getISODateString(new Date(), 8);\n    await Api.getDebutVTubers('next-7-days').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .sort((a, b) => a.debutDate.localeCompare(b.debutDate))\n          .map((e) => VTuberDebutToDisplay(e, todayDate))\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h3>\n        <Text id=\"header.debutVTubersIn7Days\">VTubers Debut in 7 days</Text>\n      </h3>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={data}\n        // Typescript does not accept concat two array of different types\n        conditionalRowStyles={ActivityRowStyles.concat(\n          IsTodayRowStyle as Array<any>\n        )}\n        customStyles={CompactTableStyle}\n        progressPending={pending}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n      />\n    </>\n  );\n};\n\nexport default DebutVTubersTable;\n","import { TableColumn } from 'react-data-table-component';\n\nexport interface RankingColumnRowData {\n  ranking: number;\n}\n\nexport const RankingColumn = <\n  RowData extends RankingColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: '#',\n    selector: (row: RowData): number => row.ranking,\n    wrap: false,\n  };\n};\n","import { VTuberDebutData } from '../../types/ApiData/VTuberDebutData';\nimport { VTuberDebutDisplayData } from '../../types/TableDisplayData/VTuberDebutDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const VTuberDebutToDisplay = (\n  e: VTuberDebutData,\n  todayDate: string\n): VTuberDebutDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  debutDate: e.debutDate,\n  isToday: e.debutDate === todayDate,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","import * as Api from '../../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport ActivityRowStyles from '../../../style/ActivityRowStyles';\nimport { CompactTableStyle } from '../../../style/CompactTableStyle';\nimport { NameColumn } from '../../../tableTypes/NameColumn';\nimport { PopularVideoColumn } from '../../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDisplayData } from '../../../types/TableDisplayData/VTuberDisplayData';\nimport DefaultDataTableProps from '../../../utils/DefaultDataTableProps';\nimport { VTuberBasicToDisplay } from '../../../utils/transform/BasicTransform';\n\nconst TopVTubersTable: FunctionalComponent = () => {\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n  ];\n\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers('10').then((res) => {\n      setData(res.data.VTubers.map((e) => VTuberBasicToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h3>\n        <Text id=\"header.YouTubeSubPlusTwitchFollowers\">\n          YouTube Subscribers + Twitch Followers\n        </Text>\n        <> </>\n        <Text id=\"header.top10\">Top 10</Text>\n      </h3>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={data}\n        conditionalRowStyles={ActivityRowStyles}\n        customStyles={CompactTableStyle}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n      />\n    </>\n  );\n};\n\nexport default TopVTubersTable;\n","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}