{"version":3,"sources":["webpack:///./utils/transform/DebutStringToDebutInfo.ts","webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./global/TodayDate.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./utils/NumberUtils.ts","webpack:///./components/DropDownList/style.module.css","webpack:///./components/DropDownList/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./utils/FilterModelHelper.ts","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/AllVTubers/index.tsx","webpack:///./components/FilterWindow/style.module.css","webpack:///./components/FilterWindow/index.tsx","webpack:///./utils/StringUtils.ts","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["maybeDebutStringToDebutInfo","debutString","hasDebutInfo","debutStringToDebutInfo","debutDate","isToday","TODAY_DATE_STRING","isRecentlyDebut","dateDiffInDays","dateStringToDate","TIMEZONE_DIFF_IN_HOUR","TODAY_DATE","YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","tryParseInteger","process","getDateAfterTimezoneAdjustment","Date","getISODateString","NameColumn","name","id","cell","row","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","ProfileImagePopup","ProfileImage","clickBehavior","PrependSign","value","valueToPercentString","toFixed","GrowthDisplayDataToString","e","tableTranslation","percentage","recordType","noRecord","atLeast","diff","str","defaultValue","parsedVal","parseInt","isNaN","DropDownList","tipText","dropDownStyle","dropDown","onChange","optionValue","map","key","option","YouTubeTwitchCountColumn","NationalityColumn","selector","nationality","filterFunction","targetModel","filterModel","Object","entries","entry","target","filter","toLowerCase","includes","some","SearchBar","placeholder","placeholderText","filterText","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","debutInfo","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","AllVTubersPage","document","title","dictionary","header","allVTubers","useState","setSortMethod","PopularVideoColumn","setData","YouTubeId","TwitchId","setFilterModel","filteredData","sort","searchBarComponent","useMemo","fieldPlaceHolderMappings","Map","table","searchByDisplayName","searchByYouTubeId","searchByTwitchId","searchByGroup","searchByNationality","tableStyle","searchBarGroup","sortingMethod","openSearchText","text","openSearch","closeSearchText","closeSearch","pending","setPending","getVTubers","Api","then","res","VTubers","VTuberBasicToDisplay","useEffect","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","FilterWindow","isOpened","setIsOpened","setFilter","createSearchBar","keyTyped","handleOnFilterChange","nullableString","trimmed","trim","trimOrNullOnEmpty","handleOnChange","get","fields","keys","tag","count","a","b","popularVideo","YouTube","subscriber","Twitch","follower"],"mappings":"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","file":"route-AllVTubers.chunk.9075f.js","sourcesContent":["import {\n  TIMEZONE_DIFF_IN_HOUR,\n  TODAY_DATE,\n  TODAY_DATE_STRING,\n} from '../../global/TodayDate';\nimport { DebutInfo, HasDebutInfo } from '../../types/DebutInfo';\nimport { dateDiffInDays, dateStringToDate } from '../DateTimeUtils';\n\nexport const maybeDebutStringToDebutInfo = (\n  debutString?: string\n): DebutInfo => {\n  if (debutString === null || debutString === undefined)\n    return { hasDebutInfo: false };\n\n  return debutStringToDebutInfo(debutString);\n};\n\nexport const debutStringToDebutInfo = (debutString: string): HasDebutInfo => {\n  return {\n    hasDebutInfo: true,\n    debutDate: debutString,\n    isToday: debutString === TODAY_DATE_STRING,\n    isRecentlyDebut:\n      dateDiffInDays(\n        dateStringToDate(debutString, TIMEZONE_DIFF_IN_HOUR),\n        TODAY_DATE\n      ) < 30,\n  };\n};\n","import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import {\n  getDateAfterTimezoneAdjustment,\n  getISODateString,\n} from '../utils/DateTimeUtils';\nimport { tryParseInteger } from '../utils/NumberUtils';\n\nconst DEFAULT_TIMEZONE_DIFF_IN_HOUR = 8;\n\nexport const TIMEZONE_DIFF_IN_HOUR: number = tryParseInteger(\n  process.env.TIMEZONE_DIFF_IN_HOUR,\n  DEFAULT_TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE: Date = getDateAfterTimezoneAdjustment(\n  new Date(),\n  TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE_STRING: string = getISODateString(\n  TODAY_DATE,\n  TIMEZONE_DIFF_IN_HOUR\n);\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { GrowthRecordType } from '../types/Common/GrowthData';\n\nexport const PrependSign = (value: number): string => {\n  if (value > 0) return `+${value}`;\n  if (value < 0) return `${value}`;\n\n  return '0';\n};\n\nconst valueToPercentString = (value: number): string =>\n  (value * 100).toFixed(2);\n\nexport const GrowthDisplayDataToString = (\n  e: { diff: number; recordType: GrowthRecordType; percentage?: number },\n  tableTranslation: { noRecord: string; atLeast: string }\n): string => {\n  if (e.percentage) {\n    switch (e.recordType) {\n      case 'none':\n        return tableTranslation.noRecord;\n      case 'partial':\n        return `${tableTranslation.atLeast} ${PrependSign(\n          e.diff\n        )} (${valueToPercentString(e.percentage as number)}%)`;\n      case 'full':\n        return `${PrependSign(e.diff)} (${valueToPercentString(\n          e.percentage\n        )}%)`;\n    }\n  }\n\n  switch (e.recordType) {\n    case 'none':\n      return tableTranslation.noRecord;\n    case 'partial':\n      return `${tableTranslation.atLeast} ${PrependSign(e.diff)}`;\n    case 'full':\n      return `${PrependSign(e.diff)}`;\n  }\n};\n\nexport const tryParseInteger = (\n  str: string | undefined,\n  defaultValue: number\n): number => {\n  if (str !== undefined) {\n    const parsedVal = parseInt(str, 10);\n    if (isNaN(parsedVal) === false) {\n      return parsedVal;\n    }\n  }\n\n  return defaultValue;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tipText\":\"tipText__4DHD3\"};","import { h } from 'preact';\nimport style from './style.module.css';\nimport dropDownStyle from '../../style/DropDownStyle.module.css';\n\nexport interface DropDownListProps<ValueType> {\n  tipText?: string;\n  optionValue?: Array<{ option: any; value: ValueType }>;\n  value?: ValueType;\n  onChange?: (e: unknown) => unknown;\n}\n\nfunction DropDownList<ValueType extends string | number>(\n  props: DropDownListProps<ValueType>\n): h.JSX.Element {\n  return (\n    <div>\n      <span class={style.tipText}>{props.tipText}</span>\n      <select\n        class={dropDownStyle.dropDown}\n        value={props.value}\n        onChange={props.onChange}\n      >\n        {props.optionValue !== undefined\n          ? props.optionValue.map((e) => (\n              <option key={e.value} value={e.value}>\n                {e.option}\n              </option>\n            ))\n          : null}\n      </select>\n    </div>\n  );\n}\n\nexport default DropDownList;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","export function filterFunction<\n  TargetType extends object,\n  FilterModel extends object\n>(targetModel: TargetType, filterModel: FilterModel): boolean {\n  const result = Object.entries(filterModel).map((entry) => {\n    const keyTyped = entry[0] as keyof typeof targetModel;\n    const target = targetModel[keyTyped] as string | undefined | null;\n\n    const filter = entry[1] as string | null;\n\n    // if there is no filter applied\n    if (filter === null) {\n      return true;\n    }\n\n    // if target doesn't exist\n    if (target === null || target === undefined || target === '') {\n      return false;\n    }\n\n    return target.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const someFilterNotMatch = result.some((e) => e === false);\n\n  return !someFilterNotMatch;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport DropDownList from '../../components/DropDownList';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport {\n  SortMethod,\n  SubscriberCountDescendingSort,\n} from '../../utils/sort/SubscriberCountSort';\nimport { VTuberBasicToDisplay } from '../../utils/transform/BasicTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport FilterWindow from '../../components/FilterWindow';\nimport { filterFunction } from '../../utils/FilterModelHelper';\nimport { VTuberDisplayDataFilterModel } from '../../types/FilterType/VTuberDisplayDataFilterModel';\n\nexport interface AllVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst AllVTubersPage: FunctionalComponent<AllVTubersPageProps> = (\n  props: AllVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.allVTubers} | ${props.dictionary.header.title}`;\n\n  const [sortMethod, setSortMethod] = useState<SortMethod>('YouTube+Twitch');\n\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n  const [filterModel, setFilterModel] = useState<VTuberDisplayDataFilterModel>({\n    name: null,\n    YouTubeId: null,\n    TwitchId: null,\n    group: null,\n    nationality: null,\n  });\n  const filteredData = data\n    .filter((e) => filterFunction(e, filterModel))\n    .sort(SubscriberCountDescendingSort(sortMethod));\n\n  const searchBarComponent = useMemo(() => {\n    const optionValue: Array<{\n      option: h.JSX.Element;\n      value: SortMethod;\n    }> = [\n      {\n        option: (\n          <Text id=\"table.YouTubeTwitchCount\">\n            YouTube Subscribers + Twitch Followers\n          </Text>\n        ),\n        value: 'YouTube+Twitch',\n      },\n      {\n        option: (\n          <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>\n        ),\n        value: 'YouTube',\n      },\n      {\n        option: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n        value: 'Twitch',\n      },\n    ];\n\n    const handleFilterWindow = (\n      filterModel: VTuberDisplayDataFilterModel\n    ): void => {\n      setFilterModel(filterModel);\n    };\n\n    const fieldPlaceHolderMappings: Map<string, string> = new Map<\n      string,\n      string\n    >([\n      ['name', props.dictionary.table.searchByDisplayName],\n      ['YouTubeId', props.dictionary.table.searchByYouTubeId],\n      ['TwitchId', props.dictionary.table.searchByTwitchId],\n      ['group', props.dictionary.table.searchByGroup],\n      ['nationality', props.dictionary.table.searchByNationality],\n    ]);\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <DropDownList\n          tipText={props.dictionary.table.sortingMethod}\n          value={sortMethod}\n          optionValue={optionValue}\n          onChange={(e: any) => setSortMethod(e.target.value)}\n        />\n        <FilterWindow\n          filterModel={filterModel}\n          fieldPlaceHolderMappings={fieldPlaceHolderMappings}\n          openSearchText={props.dictionary.text.openSearch}\n          closeSearchText={props.dictionary.text.closeSearch}\n          onChange={handleFilterWindow}\n        />\n      </div>\n    );\n  }, [filterModel, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers('all').then((res) => {\n      setData(res.data.VTubers.map((e) => VTuberBasicToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.allVTubers\">All VTubers</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default AllVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"floating\":\"floating__uhu4Y\",\"floatingHidden\":\"floatingHidden__mvSUQ\",\"floatingShowing\":\"floatingShowing__nwzm5\"};","import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { trimOrNullOnEmpty } from '../../utils/StringUtils';\nimport SearchBar from '../SearchBar';\nimport style from './style.module.css';\n\nexport interface FilterWindowProps<FilterModel extends object> {\n  filterModel: FilterModel;\n  fieldPlaceHolderMappings: Map<string, string>;\n  openSearchText: string;\n  closeSearchText: string;\n  onChange?: (e: FilterModel) => void;\n}\n\nfunction FilterWindow<FilterModel extends object>(\n  props: FilterWindowProps<FilterModel>\n): JSX.Element {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [filter, setFilter] = useState<FilterModel>(props.filterModel);\n\n  function handleOnChange(e: FilterModel): void {\n    if (props.onChange != null) {\n      props.onChange(e);\n    }\n  }\n\n  const createSearchBar = (key: string): JSX.Element => {\n    {\n      const keyTyped = key as keyof typeof filter;\n\n      const handleOnFilterChange = (e: string | null): void => {\n        const nullableString: string | null = trimOrNullOnEmpty(e);\n\n        setFilter({ ...filter, [keyTyped]: nullableString });\n        handleOnChange({ ...filter, [keyTyped]: nullableString });\n      };\n\n      return (\n        <SearchBar\n          key={key}\n          placeholderText={props.fieldPlaceHolderMappings.get(\n            keyTyped as string\n          )}\n          filterText={filter[keyTyped] as string | null}\n          onFilter={(e: any): void => handleOnFilterChange(e.target.value)}\n          onClear={(): void => handleOnFilterChange(null)}\n        />\n      );\n    }\n  };\n\n  const fields: Array<JSX.Element> = Object.keys(props.filterModel).map((key) =>\n    createSearchBar(key)\n  );\n\n  const ToggleButton = (): JSX.Element => (\n    <input\n      type=\"button\"\n      value={isOpened === true ? props.closeSearchText : props.openSearchText}\n      onClick={(): void => setIsOpened(!isOpened)}\n    />\n  );\n\n  const toggleFloatingClass = (): string => {\n    if (isOpened) return `${style.floating} ${style.floatingShowing}`;\n    else return `${style.floating} ${style.floatingHidden}`;\n  };\n\n  return (\n    <div>\n      <ToggleButton />\n      {isOpened === true ? (\n        <div class={toggleFloatingClass()}>{fields}</div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default FilterWindow;\n","export function trimOrNullOnEmpty(\n  value: string | null | undefined\n): string | null {\n  if (value === null || value === undefined) return null;\n\n  const trimmed = value.trim();\n\n  if (trimmed === '') return null;\n\n  return trimmed;\n}\n","/* eslint-disable no-fallthrough */\nimport { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has': {\n      switch (b.tag) {\n        case 'has':\n          return a.count - b.count;\n        case 'hidden':\n          return 1;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'hidden': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return 0;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'no': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return -1;\n        case 'no':\n          return 0;\n      }\n    }\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport { maybeDebutStringToDebutInfo } from './DebutStringToDebutInfo';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n  debutInfo: maybeDebutStringToDebutInfo(e.debutDate),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}