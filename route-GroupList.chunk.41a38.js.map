{"version":3,"sources":["webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/GroupList/style.module.css","webpack:///./components/Profile/index.tsx","webpack:///./utils/sort/NameSort.ts","webpack:///./routes/GroupList/index.tsx","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./utils/CountTypeUtils.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["SearchBar","props","class","style","type","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","row","activity","backgroundColor","cursor","undefined","debutInfo","hasDebutInfo","isRecentlyDebut","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","id","Profile","ToolTip","text","VTuber","name","ProfileImage","VTuberId","imgUrl","size","clickBehavior","NameSort","rowA","rowB","localeCompare","GroupListPage","document","title","dictionary","header","groupList","cell","href","GetRoute","sortFunction","sortable","minWidth","maxWidth","selector","popularity","right","averageSubscriberCount","totalSubscriberCount","memberCount","memberList","map","e","key","useState","setData","filterGroup","setFilterGroup","filterGroupMember","setFilterGroupMember","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByGroup","target","searchByGroupMember","accumulator","prev","current","GetCount","YouTube","subscriber","Twitch","follower","pending","setPending","getVTubers","Api","then","res","groups","members","length","Math","round","reduce","dataToDisplayData","sort","a","b","useEffect","QuestionMarkToolTip","width","fontSize","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","children","countType","tag","count","CountTypeCompare"],"mappings":"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","file":"route-GroupList.chunk.41a38.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileGrid\":\"profileGrid__glJEL\"};","import { FunctionalComponent, h } from 'preact';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport ProfileImage from '../ProfileImage';\nimport ToolTip from '../ToolTip';\n\nexport interface ProfileProps {\n  VTuber: VTuberData;\n  size?: number;\n}\n\nconst Profile: FunctionalComponent<ProfileProps> = (\n  props: ProfileProps\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.VTuber.name}>\n      <ProfileImage\n        VTuberId={props.VTuber.id}\n        imgUrl={props.VTuber.imgUrl}\n        size={props.size}\n        clickBehavior=\"popup\"\n      />\n    </ToolTip>\n  );\n};\n\nexport default Profile;\n","import { ColumnSortFunction } from 'react-data-table-component/dist/src/DataTable/types';\n\nexport const NameSort: ColumnSortFunction<{ name: string }> = (rowA, rowB) => {\n  return rowA.name.localeCompare(rowB.name);\n};\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupDisplayData } from '../../types/TableDisplayData/GroupDisplayData';\nimport SearchBar from '../../components/SearchBar';\nimport { GroupData } from '../../types/ApiData/GroupData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport style from './style.module.css';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { VTuberData } from '../../types/ApiData/VTuberData';\nimport Profile from '../../components/Profile';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport { GetRoute } from '../../utils/TypeSafeRouting';\nimport { NameSort } from '../../utils/sort/NameSort';\nimport { GetCount } from '../../utils/CountTypeUtils';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\n\nexport interface GroupListPageProps {\n  dictionary: Dictionary;\n}\n\nconst GroupListPage: FunctionalComponent<GroupListPageProps> = (\n  props: GroupListPageProps\n) => {\n  document.title = `${props.dictionary.header.groupList} | ${props.dictionary.header.title}`;\n  const columns: Array<TableColumn<GroupDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      cell: (row: { name: string }): h.JSX.Element => (\n        <a href={GetRoute({ type: 'group', name: row.name })}>{row.name}</a>\n      ),\n      sortFunction: NameSort,\n      sortable: true,\n      minWidth: '100px',\n      maxWidth: '150px',\n    },\n    {\n      name: <Text id=\"table.popularity\">Popularity</Text>,\n      selector: (row: { popularity: number }): number => row.popularity,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.averageSubscriberCount\">Average Subscribers</Text>,\n      selector: (row: { averageSubscriberCount: number }): number =>\n        row.averageSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.totalSubscriberCount\">Total Subscribers</Text>,\n      selector: (row: { totalSubscriberCount: number }): number =>\n        row.totalSubscriberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberCount\">Member Count</Text>,\n      selector: (row: { memberCount: number }): number => row.memberCount,\n      right: true,\n      sortable: true,\n      minWidth: '50px',\n      maxWidth: '125px',\n    },\n    {\n      name: <Text id=\"table.memberList\">Members</Text>,\n      cell: (row: {\n        memberList: ReadonlyArray<VTuberData>;\n      }): h.JSX.Element | null => (\n        <div class={style.profileGrid}>\n          {row.memberList.map((e) => (\n            <Profile key={e.id} VTuber={e} />\n          ))}\n        </div>\n      ),\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupDisplayData>>([]);\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [filterGroupMember, setFilterGroupMember] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter((item) => {\n      if (item.name === undefined) return true;\n      return item.name.toLowerCase().includes(filterGroup.toLowerCase());\n    })\n    .filter((item) => {\n      if (item.memberList === undefined) return true;\n      return item.memberList\n        .map((e) =>\n          e.name.toLowerCase().includes(filterGroupMember.toLowerCase())\n        )\n        .includes(true);\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    const handleClearGroupMember = (): void => {\n      if (filterGroupMember) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroupMember('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroupMember}\n          onFilter={(e: any): void => setFilterGroupMember(e.target.value)}\n          onClear={handleClearGroupMember}\n          filterText={filterGroupMember}\n        />\n      </div>\n    );\n  }, [filterGroup, filterGroupMember, resetPaginationToggle, props.dictionary]);\n\n  const accumulator = (prev: number, current: VTuberData): number =>\n    prev +\n    (GetCount(current.YouTube?.subscriber) ?? 0) +\n    (GetCount(current.Twitch?.follower) ?? 0);\n\n  const dataToDisplayData = (e: GroupData): GroupDisplayData => ({\n    id: e.id,\n    name: e.name,\n    popularity: e.popularity,\n    averageSubscriberCount:\n      e.members.length !== 0\n        ? Math.round(e.members.reduce(accumulator, 0) / e.members.length)\n        : 0,\n    totalSubscriberCount: e.members.reduce(accumulator, 0),\n    memberCount: e.members.length,\n    memberList: e.members,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroups().then((res) => {\n      setData(\n        res.data.groups\n          .map((e) => dataToDisplayData(e))\n          .sort((a, b) => b.popularity - a.popularity) // sort in descending order\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.groupList\">Group List</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.groupList\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default GroupListPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","/* eslint-disable no-fallthrough */\nimport { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has': {\n      switch (b.tag) {\n        case 'has':\n          return a.count - b.count;\n        case 'hidden':\n          return 1;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'hidden': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return 0;\n        case 'no':\n          return 1;\n      }\n    }\n\n    case 'no': {\n      switch (b.tag) {\n        case 'has':\n          return -1;\n        case 'hidden':\n          return -1;\n        case 'no':\n          return 0;\n      }\n    }\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}