{"version":3,"sources":["webpack:///./utils/transform/GrowthTransform.ts","webpack:///./utils/transform/DebutStringToDebutInfo.ts","webpack:///./style/CompactTableStyle.ts","webpack:///./global/TodayDate.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/_7DaysGrowthColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./tableTypes/_30DaysGrowthColumn.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./utils/NumberUtils.ts","webpack:///./utils/sort/GrowthSort.ts","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./utils/FilterModelHelper.ts","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/GrowingVTubers/index.tsx","webpack:///./tableTypes/YouTubeSubscriberColumn.tsx","webpack:///./components/FilterWindow/style.module.css","webpack:///./components/FilterWindow/index.tsx","webpack:///./utils/StringUtils.ts","webpack:///./components/ToolTip/style.module.css","webpack:///./components/ToolTip/index.tsx","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css","webpack:///./components/QuestionMarkToolTip/style.module.css","webpack:///./components/QuestionMarkToolTip/index.tsx"],"names":["growthDataToDisplayData","e","subCount","percentage","undefined","diff","VTuberGrowthToDisplay","VTuberBasicToDisplay","YouTubeSubscriber","YouTube","subscriber","_7DaysGrowth","count","_30DaysGrowth","maybeDebutStringToDebutInfo","debutString","hasDebutInfo","debutStringToDebutInfo","debutDate","isToday","TODAY_DATE_STRING","isRecentlyDebut","dateDiffInDays","dateStringToDate","TIMEZONE_DIFF_IN_HOUR","TODAY_DATE","CompactTableStyle","headCells","style","paddingLeft","paddingRight","cells","tryParseInteger","process","getDateAfterTimezoneAdjustment","Date","getISODateString","NameColumn","name","id","cell","row","VTuberId","imgUrl","_7DaysGrowthColumn","tableTranslation","GrowthDisplayDataToString","GroupColumn","group","href","GetRoute","type","_30DaysGrowthColumn","ProfileImagePopup","props","class","ProfileImage","clickBehavior","PrependSign","value","valueToPercentString","toFixed","recordType","noRecord","atLeast","str","defaultValue","parsedVal","parseInt","isNaN","_7DaysGrowthSort","rowA","rowB","aCount","bCount","_30DaysGrowthSort","NationalityColumn","selector","nationality","filterFunction","targetModel","filterModel","Object","entries","map","entry","target","filter","toLowerCase","includes","some","SearchBar","placeholder","placeholderText","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","debutInfo","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","GrowingVTubersPage","document","title","dictionary","header","growingVTubers","width","YouTubeSubscriberColumn","sortable","table","right","sortFunction","PopularVideoColumn","useState","setData","YouTubeId","TwitchId","setFilterModel","filteredData","searchBarComponent","useMemo","fieldPlaceHolderMappings","Map","searchByDisplayName","searchByYouTubeId","searchByTwitchId","searchByGroup","searchByNationality","tableStyle","searchBarGroup","openSearchText","text","openSearch","closeSearchText","closeSearch","pending","setPending","getVTubers","Api","then","res","VTubers","sort","a","b","useEffect","fontSize","customStyles","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","FilterWindow","isOpened","setIsOpened","setFilter","createSearchBar","key","keyTyped","handleOnFilterChange","nullableString","trimmed","trim","trimOrNullOnEmpty","handleOnChange","get","fields","keys","ToolTip","children","popularVideo","Twitch","TwitchFollower","follower","QuestionMarkToolTip"],"mappings":"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","file":"route-GrowingVTubers.chunk.0989d.js","sourcesContent":["import { VTuberGrowthData } from '../../types/ApiData/VTuberGrowthData';\nimport { GrowthData } from '../../types/Common/GrowthData';\nimport {\n  GrowthDisplayData,\n  VTuberGrowthDisplayData,\n} from '../../types/TableDisplayData/VTuberGrowthDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nconst growthDataToDisplayData = (\n  e: GrowthData,\n  subCount?: number\n): GrowthDisplayData => ({\n  ...e,\n  percentage: subCount !== undefined && subCount !== 0 ? e.diff / subCount : 0,\n});\n\nexport const VTuberGrowthToDisplay = (\n  e: VTuberGrowthData\n): VTuberGrowthDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n  YouTubeSubscriber: e.YouTube.subscriber,\n  _7DaysGrowth: growthDataToDisplayData(\n    e.YouTube._7DaysGrowth,\n    e.YouTube.subscriber.count\n  ),\n  _30DaysGrowth: growthDataToDisplayData(\n    e.YouTube._30DaysGrowth,\n    e.YouTube.subscriber.count\n  ),\n});\n","import {\n  TIMEZONE_DIFF_IN_HOUR,\n  TODAY_DATE,\n  TODAY_DATE_STRING,\n} from '../../global/TodayDate';\nimport { DebutInfo, HasDebutInfo } from '../../types/DebutInfo';\nimport { dateDiffInDays, dateStringToDate } from '../DateTimeUtils';\n\nexport const maybeDebutStringToDebutInfo = (\n  debutString?: string\n): DebutInfo => {\n  if (debutString === null || debutString === undefined)\n    return { hasDebutInfo: false };\n\n  return debutStringToDebutInfo(debutString);\n};\n\nexport const debutStringToDebutInfo = (debutString: string): HasDebutInfo => {\n  return {\n    hasDebutInfo: true,\n    debutDate: debutString,\n    isToday: debutString === TODAY_DATE_STRING,\n    isRecentlyDebut:\n      dateDiffInDays(\n        dateStringToDate(debutString, TIMEZONE_DIFF_IN_HOUR),\n        TODAY_DATE\n      ) < 30,\n  };\n};\n","import { TableStyles } from 'react-data-table-component';\n\nexport const CompactTableStyle: TableStyles = {\n  headCells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for head cells\n      paddingRight: '5px',\n    },\n  },\n  cells: {\n    style: {\n      paddingLeft: '5px', // override the cell padding for data cells\n      paddingRight: '5px',\n    },\n  },\n};\n","import {\n  getDateAfterTimezoneAdjustment,\n  getISODateString,\n} from '../utils/DateTimeUtils';\nimport { tryParseInteger } from '../utils/NumberUtils';\n\nconst DEFAULT_TIMEZONE_DIFF_IN_HOUR = 8;\n\nexport const TIMEZONE_DIFF_IN_HOUR: number = tryParseInteger(\n  process.env.TIMEZONE_DIFF_IN_HOUR,\n  DEFAULT_TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE: Date = getDateAfterTimezoneAdjustment(\n  new Date(),\n  TIMEZONE_DIFF_IN_HOUR\n);\n\nexport const TODAY_DATE_STRING: string = getISODateString(\n  TODAY_DATE,\n  TIMEZONE_DIFF_IN_HOUR\n);\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GrowthDisplayData } from '../types/TableDisplayData/VTuberGrowthDisplayData';\nimport { GrowthDisplayDataToString } from '../utils/NumberUtils';\n\nexport interface Days7GrowthColumnRowData {\n  _7DaysGrowth: GrowthDisplayData;\n}\n\nexport const _7DaysGrowthColumn = <\n  RowData extends Days7GrowthColumnRowData\n>(tableTranslation: {\n  noRecord: string;\n  atLeast: string;\n}): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table._7DaysGrowth\">7 Days Growth (Percent)</Text>,\n    cell: (row: RowData): string =>\n      GrowthDisplayDataToString(row._7DaysGrowth, tableTranslation),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GrowthDisplayData } from '../types/TableDisplayData/VTuberGrowthDisplayData';\nimport { GrowthDisplayDataToString } from '../utils/NumberUtils';\n\nexport interface Days30GrowthColumnRowData {\n  _30DaysGrowth: GrowthDisplayData;\n}\n\nexport const _30DaysGrowthColumn = <\n  RowData extends Days30GrowthColumnRowData\n>(tableTranslation: {\n  noRecord: string;\n  atLeast: string;\n}): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table._30DaysGrowth\">30 Days Growth (Percent)</Text>,\n    cell: (row: RowData): string =>\n      GrowthDisplayDataToString(row._30DaysGrowth, tableTranslation),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { GrowthRecordType } from '../types/Common/GrowthData';\n\nexport const PrependSign = (value: number): string => {\n  if (value > 0) return `+${value}`;\n  if (value < 0) return `${value}`;\n\n  return '0';\n};\n\nconst valueToPercentString = (value: number): string =>\n  (value * 100).toFixed(2);\n\nexport const GrowthDisplayDataToString = (\n  e: { diff: number; recordType: GrowthRecordType; percentage?: number },\n  tableTranslation: { noRecord: string; atLeast: string }\n): string => {\n  if (e.percentage) {\n    switch (e.recordType) {\n      case 'none':\n        return tableTranslation.noRecord;\n      case 'partial':\n        return `${tableTranslation.atLeast} ${PrependSign(\n          e.diff\n        )} (${valueToPercentString(e.percentage as number)}%)`;\n      case 'full':\n        return `${PrependSign(e.diff)} (${valueToPercentString(\n          e.percentage\n        )}%)`;\n    }\n  }\n\n  switch (e.recordType) {\n    case 'none':\n      return tableTranslation.noRecord;\n    case 'partial':\n      return `${tableTranslation.atLeast} ${PrependSign(e.diff)}`;\n    case 'full':\n      return `${PrependSign(e.diff)}`;\n  }\n};\n\nexport const tryParseInteger = (\n  str: string | undefined,\n  defaultValue: number\n): number => {\n  if (str !== undefined) {\n    const parsedVal = parseInt(str, 10);\n    if (isNaN(parsedVal) === false) {\n      return parsedVal;\n    }\n  }\n\n  return defaultValue;\n};\n","import { ColumnSortFunction } from 'react-data-table-component/dist/src/DataTable/types';\nimport { GrowthDisplayData } from '../../types/TableDisplayData/VTuberGrowthDisplayData';\n\n// TODO: how do I inject field name _7DaysGrowth using template?\nexport const _7DaysGrowthSort: ColumnSortFunction<{\n  _7DaysGrowth: GrowthDisplayData;\n}> = (rowA, rowB) => {\n  const aCount = rowA._7DaysGrowth.percentage;\n  const bCount = rowB._7DaysGrowth.percentage;\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\nexport const _30DaysGrowthSort: ColumnSortFunction<{\n  _30DaysGrowth: GrowthDisplayData;\n}> = (rowA, rowB) => {\n  const aCount = rowA._30DaysGrowth.percentage;\n  const bCount = rowB._30DaysGrowth.percentage;\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","export function filterFunction<\n  TargetType extends object,\n  FilterModel extends object\n>(targetModel: TargetType, filterModel: FilterModel): boolean {\n  const result = Object.entries(filterModel).map((entry) => {\n    const keyTyped = entry[0] as keyof typeof targetModel;\n    const target = targetModel[keyTyped] as string | undefined | null;\n\n    const filter = entry[1] as string | null;\n\n    // if there is no filter applied\n    if (filter === null) {\n      return true;\n    }\n\n    // if target doesn't exist\n    if (target === null || target === undefined || target === '') {\n      return false;\n    }\n\n    return target.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const someFilterNotMatch = result.some((e) => e === false);\n\n  return !someFilterNotMatch;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport QuestionMarkToolTip from '../../components/QuestionMarkToolTip';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { CompactTableStyle } from '../../style/CompactTableStyle';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeSubscriberColumn } from '../../tableTypes/YouTubeSubscriberColumn';\nimport { _30DaysGrowthColumn } from '../../tableTypes/_30DaysGrowthColumn';\nimport { _7DaysGrowthColumn } from '../../tableTypes/_7DaysGrowthColumn';\nimport { VTuberGrowthDisplayData } from '../../types/TableDisplayData/VTuberGrowthDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { VTuberGrowthToDisplay } from '../../utils/transform/GrowthTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport {\n  _30DaysGrowthSort,\n  _7DaysGrowthSort,\n} from '../../utils/sort/GrowthSort';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport { VTuberGrowthDisplayDataFilterModel } from '../../types/FilterType/VTuberGrowthDisplayDataFilterModel';\nimport { filterFunction } from '../../utils/FilterModelHelper';\nimport FilterWindow from '../../components/FilterWindow';\n\nexport interface GrowingVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst GrowingVTubersPage: FunctionalComponent<GrowingVTubersPageProps> = (\n  props: GrowingVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.growingVTubers} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<VTuberGrowthDisplayData>> = [\n    {\n      ...NameColumn(),\n      width: '200px',\n    },\n    {\n      ...YouTubeSubscriberColumn(),\n      sortable: true,\n    },\n    {\n      ..._7DaysGrowthColumn(props.dictionary.table),\n      right: true,\n      sortable: true,\n      sortFunction: _7DaysGrowthSort,\n    },\n    {\n      ..._30DaysGrowthColumn(props.dictionary.table),\n      right: true,\n      sortable: true,\n      sortFunction: _30DaysGrowthSort,\n    },\n    {\n      ...PopularVideoColumn(),\n      width: '100px',\n    },\n    {\n      ...GroupColumn(),\n      width: '100px',\n    },\n    {\n      ...NationalityColumn(),\n      width: '100px',\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberGrowthDisplayData>>([]);\n  const [filterModel, setFilterModel] =\n    useState<VTuberGrowthDisplayDataFilterModel>({\n      name: null,\n      YouTubeId: null,\n      TwitchId: null,\n      group: null,\n      nationality: null,\n    });\n  const filteredData = data.filter((e) => filterFunction(e, filterModel));\n\n  const searchBarComponent = useMemo(() => {\n    const handleFilterWindow = (\n      filterModel: VTuberGrowthDisplayDataFilterModel\n    ): void => {\n      setFilterModel(filterModel);\n    };\n\n    const fieldPlaceHolderMappings: Map<string, string> = new Map<\n      string,\n      string\n    >([\n      ['name', props.dictionary.table.searchByDisplayName],\n      ['YouTubeId', props.dictionary.table.searchByYouTubeId],\n      ['TwitchId', props.dictionary.table.searchByTwitchId],\n      ['group', props.dictionary.table.searchByGroup],\n      ['nationality', props.dictionary.table.searchByNationality],\n    ]);\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <FilterWindow\n          filterModel={filterModel}\n          fieldPlaceHolderMappings={fieldPlaceHolderMappings}\n          openSearchText={props.dictionary.text.openSearch}\n          closeSearchText={props.dictionary.text.closeSearch}\n          onChange={handleFilterWindow}\n        />\n      </div>\n    );\n  }, [filterModel, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGrowingVTubers('100').then((res) => {\n      setData(\n        res.data.VTubers.map((e) => e)\n          .map((e) => VTuberGrowthToDisplay(e))\n          .sort((a, b) => b._7DaysGrowth.percentage - a._7DaysGrowth.percentage)\n      );\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.growingVTubers\">Growing VTubers</Text>\n        {GetCurrentNationalitySpan()}\n        <QuestionMarkToolTip\n          width=\"300px\"\n          fontSize=\"13px\"\n          text={<Text id=\"toolTip.growingVTubers\">tooltip text</Text>}\n        />\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        customStyles={CompactTableStyle}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default GrowingVTubersPage;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { HasCountType } from '../types/Common/CountType';\n\nexport interface YouTubeSubscriberColumnRowData {\n  YouTubeSubscriber: HasCountType;\n}\n\nexport const YouTubeSubscriberColumn = <\n  RowData extends YouTubeSubscriberColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>,\n    selector: (row: RowData): number => row.YouTubeSubscriber.count,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"floating\":\"floating__uhu4Y\",\"floatingHidden\":\"floatingHidden__mvSUQ\",\"floatingShowing\":\"floatingShowing__nwzm5\"};","import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { trimOrNullOnEmpty } from '../../utils/StringUtils';\nimport SearchBar from '../SearchBar';\nimport style from './style.module.css';\n\nexport interface FilterWindowProps<FilterModel extends object> {\n  filterModel: FilterModel;\n  fieldPlaceHolderMappings: Map<string, string>;\n  openSearchText: string;\n  closeSearchText: string;\n  onChange?: (e: FilterModel) => void;\n}\n\nfunction FilterWindow<FilterModel extends object>(\n  props: FilterWindowProps<FilterModel>\n): JSX.Element {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [filter, setFilter] = useState<FilterModel>(props.filterModel);\n\n  function handleOnChange(e: FilterModel): void {\n    if (props.onChange != null) {\n      props.onChange(e);\n    }\n  }\n\n  const createSearchBar = (key: string): JSX.Element => {\n    {\n      const keyTyped = key as keyof typeof filter;\n\n      const handleOnFilterChange = (e: string | null): void => {\n        const nullableString: string | null = trimOrNullOnEmpty(e);\n\n        setFilter({ ...filter, [keyTyped]: nullableString });\n        handleOnChange({ ...filter, [keyTyped]: nullableString });\n      };\n\n      return (\n        <SearchBar\n          key={key}\n          placeholderText={props.fieldPlaceHolderMappings.get(\n            keyTyped as string\n          )}\n          filterText={filter[keyTyped] as string | null}\n          onFilter={(e: any): void => handleOnFilterChange(e.target.value)}\n          onClear={(): void => handleOnFilterChange(null)}\n        />\n      );\n    }\n  };\n\n  const fields: Array<JSX.Element> = Object.keys(props.filterModel).map((key) =>\n    createSearchBar(key)\n  );\n\n  const ToggleButton = (): JSX.Element => (\n    <input\n      type=\"button\"\n      value={isOpened === true ? props.closeSearchText : props.openSearchText}\n      onClick={(): void => setIsOpened(!isOpened)}\n    />\n  );\n\n  const toggleFloatingClass = (): string => {\n    if (isOpened) return `${style.floating} ${style.floatingShowing}`;\n    else return `${style.floating} ${style.floatingHidden}`;\n  };\n\n  return (\n    <div>\n      <ToggleButton />\n      {isOpened === true ? (\n        <div class={toggleFloatingClass()}>{fields}</div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default FilterWindow;\n","export function trimOrNullOnEmpty(\n  value: string | null | undefined\n): string | null {\n  if (value === null || value === undefined) return null;\n\n  const trimmed = value.trim();\n\n  if (trimmed === '') return null;\n\n  return trimmed;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip__vtGmz\",\"tooltipText\":\"tooltipText__pA-zc\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface ToolTipProps {\n  text: string | React.ReactNode;\n  children: React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst ToolTip: FunctionalComponent<ToolTipProps> = (\n  props: ToolTipProps\n): h.JSX.Element => {\n  return (\n    <div class={style.tooltip}>\n      {props.children}\n      <span\n        class={style.tooltipText}\n        style={{ width: props.width, fontSize: props.fontSize }}\n      >\n        {props.text}\n      </span>\n    </div>\n  );\n};\n\nexport default ToolTip;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport { maybeDebutStringToDebutInfo } from './DebutStringToDebutInfo';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n  debutInfo: maybeDebutStringToDebutInfo(e.debutDate),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionMark\":\"questionMark__RT3wD\"};","import { FunctionalComponent, h } from 'preact';\nimport ToolTip from '../ToolTip';\nimport style from './style.module.css';\n\nexport interface QuestionMarkToolTip {\n  text: string | React.ReactNode;\n  width?: string;\n  fontSize?: string;\n}\n\nconst QuestionMarkToolTip: FunctionalComponent<QuestionMarkToolTip> = (\n  props: QuestionMarkToolTip\n): h.JSX.Element => {\n  return (\n    <ToolTip text={props.text} width={props.width} fontSize={props.fontSize}>\n      <img class={style.questionMark} />\n    </ToolTip>\n  );\n};\n\nexport default QuestionMarkToolTip;\n"],"sourceRoot":""}