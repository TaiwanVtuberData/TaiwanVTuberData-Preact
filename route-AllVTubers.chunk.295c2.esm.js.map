{"version":3,"sources":["webpack:///./routes/AllVTubers/index.tsx"],"names":["AllVTubersPage","props","document","title","dictionary","header","allVTubers","columns","name","width","cell","row","profileImg","id","wrap","selector","channelLinks","hasYouTube","YouTubeSubscriberCount","right","sortable","sortFunction","YouTubeSubscriberCountSort","hasTwitch","TwitchFollowerCount","href","baseroute","group","nationality","data","setData","useState","filterName","setFilterName","filterGroup","setFilterGroup","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","undefined","searchBarComponent","useMemo","placeholderText","table","searchByDisplayName","onFilter","e","target","value","onClear","filterText","searchByGroup","pending","setPending","getVTubers","async","Api","then","res","VTubers","map","ProfileImage","imgUrl","ChannelLinks","YouTubeId","YouTube","TwitchId","Twitch","subscriberCount","followerCount","activity","dataToDisplayData","useEffect","DefaultDataTableProps","pagination","paginationComponentOptions","paginationOptions","progressPending","subHeader","subHeaderComponent"],"mappings":"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","file":"route-AllVTubers.chunk.295c2.esm.js","sourcesContent":["import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport baseroute from '../../baseroute';\nimport ChannelLinks from '../../components/ChannelLinks';\nimport ProfileImage from '../../components/ProfileImage';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { VTuberData } from '../../types/VTuberData';\nimport { VTuberDisplayData } from '../../types/VTuberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { YouTubeSubscriberCountSort } from '../../utils/YouTubeSubscriberCountSort';\nimport '../../style/index.css';\nimport '../../style/DataTableStyle.css';\n\nexport interface AllVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst AllVTubersPage: FunctionalComponent<AllVTubersPageProps> = (\n  props: AllVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.allVTubers} | ${props.dictionary.header.title}`;\n  const profileImgColumnWidth: number = 75 as const;\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    {\n      name: '',\n      width: `${profileImgColumnWidth}px`,\n      cell: (row: { profileImg: h.JSX.Element | null }): h.JSX.Element | null =>\n        row.profileImg,\n    },\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      width: `calc(${profileImgColumnWidth}px-25%)`,\n      wrap: true,\n      selector: (row: { name: string }): string => row.name,\n    },\n    {\n      name: <Text id=\"table.links\">Links</Text>,\n      width: `calc(${profileImgColumnWidth}px-10%)`,\n      cell: (row: {\n        channelLinks: h.JSX.Element | null;\n      }): h.JSX.Element | null => row.channelLinks,\n    },\n    {\n      name: <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>,\n      width: `calc(${profileImgColumnWidth}px-15%)`,\n      cell: (row: {\n        hasYouTube: boolean;\n        YouTubeSubscriberCount?: number;\n      }): h.JSX.Element | number | null =>\n        row.hasYouTube\n          ? row.YouTubeSubscriberCount ?? (\n              <Text id=\"table.hiddenCount\">hidden</Text>\n            )\n          : null,\n      right: true,\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountSort,\n    },\n    {\n      name: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n      width: `calc(${profileImgColumnWidth}px-15%)`,\n      selector: (row: {\n        hasTwitch: boolean;\n        TwitchFollowerCount: number;\n      }): number | string => (row.hasTwitch ? row.TwitchFollowerCount : ''),\n      right: true,\n      sortable: true,\n    },\n    {\n      name: <Text id=\"table.group\">Group</Text>,\n      width: `calc(${profileImgColumnWidth}px-25%)`,\n      wrap: true,\n      cell: (row: { group?: string }): h.JSX.Element | string =>\n        <a href={`${baseroute}/group/${row.group}`}>{row.group}</a> ?? '',\n    },\n    {\n      name: <Text id=\"table.nationality\">Nationality</Text>,\n      width: `calc(${profileImgColumnWidth}px-10%)`,\n      selector: (row: { nationality?: string }): string =>\n        row.nationality ?? '',\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterGroup, setFilterGroup] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (item.group === undefined) return true;\n      return item.group.toLowerCase().includes(filterGroup.toLowerCase());\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearGroup = (): void => {\n      if (filterGroup) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterGroup('');\n      }\n    };\n\n    return (\n      <Fragment>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByGroup}\n          onFilter={(e: any): void => setFilterGroup(e.target.value)}\n          onClear={handleClearGroup}\n          filterText={filterGroup}\n        />\n      </Fragment>\n    );\n  }, [filterName, filterGroup, resetPaginationToggle, props.dictionary]);\n\n  const dataToDisplayData = (e: VTuberData): VTuberDisplayData => ({\n    id: e.id,\n    profileImg: ProfileImage({ imgUrl: e.imgUrl }),\n    name: e.name,\n    channelLinks: ChannelLinks({\n      YouTubeId: e.YouTube?.id,\n      TwitchId: e.Twitch?.id,\n    }),\n    hasYouTube: e.YouTube !== undefined,\n    YouTubeSubscriberCount: e.YouTube?.subscriberCount,\n    hasTwitch: e.Twitch !== undefined,\n    TwitchFollowerCount: e.Twitch?.followerCount ?? 0,\n    group: e.group,\n    nationality: e.nationality,\n    activity: e.activity,\n  });\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers().then((res) => {\n      setData(res.data.VTubers.map((e) => dataToDisplayData(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>\n        <Text id=\"header.allVTubers\">All VTubers</Text>\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </Fragment>\n  );\n};\n\nexport default AllVTubersPage;\n"],"sourceRoot":""}