{"version":3,"sources":["webpack:///./tableTypes/VideoColumn.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./routes/Livestreams/index.tsx","webpack:///./style/DataTableStyle.module.css","webpack:///./utils/transform/LivestreamTransform.ts"],"names":["VideoColumn","name","id","cell","row","VideoLink","thumbnailUrl","videoUrl","ProfileImagePopup","props","class","style","ProfileImage","VTuberId","imgUrl","clickBehavior","SearchBar","type","placeholder","placeholderText","value","filterText","onChange","onFilter","onClick","onClear","ActivityRowStyles","when","activity","backgroundColor","cursor","undefined","debutInfo","hasDebutInfo","isRecentlyDebut","color","DefaultDataTableProps","columns","data","conditionalRowStyles","GetCurrentNationalitySpan","nationalityModifier","getNationalityModifierState","LivestreamsPage","document","title","dictionary","header","livestreaming","width","selector","getFormattedDateTime","startTime","sortable","wrap","hide","Media","SM","useState","setData","filterName","setFilterName","filterTitle","setFilterTitle","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","table","searchByDisplayName","e","target","searchByTitle","pending","setPending","getLivestreams","Api","then","res","arrayData","livestreams","map","index","LivestreamToDisplayData","sort","a","b","getTime","setTimeout","currentTime","Date","setHours","getHours","closestToNow","findClosestSortedDateIndex","getElementById","Math","max","scrollIntoView","behavior","useEffect","customStyles","rows","height","headCells","paddingLeft","paddingRight","cells","fixedHeader","progressComponent","progressPending","subHeader","subHeaderComponent"],"mappings":"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","file":"route-Livestreams.chunk.c0aac.js","sourcesContent":["import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport VideoLink from '../components/VideoLink';\n\nexport interface VideoColumnRowData {\n  thumbnailUrl: string;\n  videoUrl: string;\n}\n\nexport const VideoColumn = <\n  RowData extends VideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.video\">Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      VideoLink({\n        thumbnailUrl: row.thumbnailUrl,\n        videoUrl: row.videoUrl,\n      }),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\nimport { DebutInfo } from '../types/DebutInfo';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity; debutInfo?: DebutInfo }): boolean =>\n      row.activity === 'active' &&\n      row.debutInfo !== undefined &&\n      row.debutInfo.hasDebutInfo === true &&\n      row.debutInfo.isRecentlyDebut === true,\n    style: {\n      backgroundColor: 'rgba(156, 205, 196, 0.5)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, {\n  Media,\n  TableColumn,\n  TableStyles,\n} from 'react-data-table-component';\nimport ProfileImagePopup from '../../components/ProfileImagePopup';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { VideoColumn } from '../../tableTypes/VideoColumn';\nimport { LivestreamDisplayData } from '../../types/TableDisplayData/LivestreamDisplayData';\nimport {\n  findClosestSortedDateIndex,\n  getFormattedDateTime,\n} from '../../utils/DateTimeUtils';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport { LivestreamToDisplayData } from '../../utils/transform/LivestreamTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\n\nexport interface LivestreamsPageProps {\n  dictionary: Dictionary;\n}\n\nconst LivestreamsPage: FunctionalComponent<LivestreamsPageProps> = (\n  props: LivestreamsPageProps\n) => {\n  document.title = `${props.dictionary.header.livestreaming} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<LivestreamDisplayData>> = [\n    {\n      name: <Text id=\"table.displayName\">Name</Text>,\n      cell: (row: {\n        VTuberId: string;\n        imgUrl?: string;\n        name: string;\n      }): JSX.Element => (\n        <ProfileImagePopup\n          VTuberId={row.VTuberId}\n          imgUrl={row.imgUrl}\n          name={row.name}\n        />\n      ),\n    },\n    {\n      ...VideoColumn(),\n      width: '200px',\n    },\n    {\n      name: <Text id=\"table.startTime\">Start Time</Text>,\n      selector: (row: { startTime: Date }): string =>\n        getFormattedDateTime(row.startTime),\n      sortable: true,\n      wrap: true,\n    },\n    {\n      name: <Text id=\"table.title\">Title</Text>,\n      selector: (row: { title?: string }): string => row.title ?? '',\n      wrap: true,\n      hide: Media.SM,\n    },\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<LivestreamDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [filterTitle, setFilterTitle] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data\n    .filter(\n      (item) =>\n        item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n    )\n    .filter((item) => {\n      if (item.title === undefined) return true;\n      return item.title.toLowerCase().includes(filterTitle.toLowerCase());\n    });\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    const handleClearTitle = (): void => {\n      if (filterTitle) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterTitle('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByTitle}\n          onFilter={(e: any): void => setFilterTitle(e.target.value)}\n          onClear={handleClearTitle}\n          filterText={filterTitle}\n        />\n      </div>\n    );\n  }, [filterName, filterTitle, resetPaginationToggle, props.dictionary]);\n  const [pending, setPending] = useState(true);\n\n  const getLivestreams = async (): Promise<void> => {\n    await Api.getLivestreams('all').then((res) => {\n      const arrayData: Array<LivestreamDisplayData> = res.data.livestreams\n        .map((e) => e)\n        .map((e, index) => LivestreamToDisplayData(e, index))\n        // what a great Date API, thanks javascript\n        .sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n      // thanks to JavaScript sorting being mutable, I have to convert ReadonlyArray to Array first\n      setData(arrayData);\n      setPending(false);\n\n      // TODO: this is a hack to find the closest livestream\n      setTimeout(() => {\n        // Note: document.getElementById('row-{index}') only work because array data id is set to their index\n        const currentTime = new Date();\n        currentTime.setHours(currentTime.getHours() - 1);\n        const closestToNow = findClosestSortedDateIndex(arrayData, currentTime);\n\n        // scroll to best row - 1 because the header will block the full view of best row\n        document\n          .getElementById(`row-${Math.max(0, closestToNow - 1)}`)\n          ?.scrollIntoView({ behavior: 'smooth' });\n      }, 500);\n    });\n  };\n\n  useEffect(() => {\n    getLivestreams();\n  }, []);\n\n  const customStyles: TableStyles = {\n    rows: {\n      style: {\n        height: '120px', // fix row height so scrolling won't be affected by image not rendered\n      },\n    },\n    headCells: {\n      style: {\n        paddingLeft: '5px', // override the cell padding for head cells\n        paddingRight: '5px',\n      },\n    },\n    cells: {\n      style: {\n        paddingLeft: '5px', // override the cell padding for data cells\n        paddingRight: '5px',\n      },\n    },\n  };\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.livestreaming\">Streaming Now</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        customStyles={customStyles}\n        fixedHeader\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default LivestreamsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};","import { LivestreamData } from '../../types/ApiData/LivestreamData';\nimport { LivestreamDisplayData } from '../../types/TableDisplayData/LivestreamDisplayData';\n\nexport const LivestreamToDisplayData = (\n  e: LivestreamData,\n  index: number\n): LivestreamDisplayData => ({\n  id: index,\n  VTuberId: e.id,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  title: e.title,\n  thumbnailUrl: e.thumbnailUrl,\n  videoUrl: e.videoUrl,\n  startTime: new Date(e.startTime),\n});\n"],"sourceRoot":""}