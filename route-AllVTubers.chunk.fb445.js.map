{"version":3,"sources":["webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./tableTypes/GroupColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./routes/AllVTubers/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./components/DropDownList/style.module.css","webpack:///./components/DropDownList/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./utils/FilterModelHelper.ts","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/NationalityUtils.tsx","webpack:///./components/FilterWindow/style.module.css","webpack:///./components/FilterWindow/index.tsx","webpack:///./utils/StringUtils.ts","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","name","id","cell","row","VTuberId","imgUrl","GroupColumn","group","href","GetRoute","type","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","AllVTubersPage","document","title","dictionary","header","allVTubers","useState","setSortMethod","columns","YouTubeTwitchCountColumn","PopularVideoColumn","NationalityColumn","data","setData","YouTubeId","TwitchId","nationality","filterModel","setFilterModel","filteredData","filter","e","filterFunction","sort","searchBarComponent","useMemo","optionValue","option","value","fieldPlaceHolderMappings","Map","table","searchByDisplayName","searchByYouTubeId","searchByTwitchId","searchByGroup","searchByNationality","tableStyle","searchBarGroup","tipText","sortingMethod","onChange","target","openSearchText","text","openSearch","closeSearchText","closeSearch","pending","setPending","getVTubers","Api","then","res","VTubers","map","VTuberBasicToDisplay","useEffect","GetCurrentNationalitySpan","DefaultDataTableProps","conditionalRowStyles","ActivityRowStyles","fixedHeader","pagination","paginationComponentOptions","paginationOptions","progressComponent","progressPending","subHeader","subHeaderComponent","ProfileImagePopup","ProfileImage","clickBehavior","DropDownList","dropDownStyle","dropDown","key","selector","targetModel","Object","entries","entry","toLowerCase","includes","some","SearchBar","placeholder","placeholderText","filterText","onFilter","onClick","onClear","when","activity","backgroundColor","cursor","color","nationalityModifier","getNationalityModifierState","FilterWindow","isOpened","setIsOpened","setFilter","createSearchBar","keyTyped","handleOnFilterChange","nullableString","trimmed","trim","trimOrNullOnEmpty","handleOnChange","get","fields","keys","tag","count","a","b","popularVideo","YouTube","subscriber","Twitch","follower"],"mappings":"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","file":"route-AllVTubers.chunk.fb445.js","sourcesContent":["import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport { GetRoute } from '../utils/TypeSafeRouting';\n\nexport interface GroupColumnRowData {\n  group?: string;\n}\n\nexport const GroupColumn = <\n  RowData extends GroupColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.group\">Group</Text>,\n    cell: (row: RowData): h.JSX.Element | null =>\n      row.group !== undefined ? (\n        <a href={GetRoute({ type: 'group', name: row.group })}>{row.group}</a>\n      ) : null,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","import * as Api from '../../services/ApiService';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { useState, useMemo, useEffect } from 'preact/hooks';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport DropDownList from '../../components/DropDownList';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport { GroupColumn } from '../../tableTypes/GroupColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport { GetCurrentNationalitySpan } from '../../utils/NationalityUtils';\nimport {\n  SortMethod,\n  SubscriberCountDescendingSort,\n} from '../../utils/sort/SubscriberCountSort';\nimport { VTuberBasicToDisplay } from '../../utils/transform/BasicTransform';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\nimport FilterWindow from '../../components/FilterWindow';\nimport { filterFunction } from '../../utils/FilterModelHelper';\nimport { VTuberDisplayDataFilterModel } from '../../types/FilterType/VTuberDisplayDataFilterModel';\n\nexport interface AllVTubersPageProps {\n  dictionary: Dictionary;\n}\n\nconst AllVTubersPage: FunctionalComponent<AllVTubersPageProps> = (\n  props: AllVTubersPageProps\n) => {\n  document.title = `${props.dictionary.header.allVTubers} | ${props.dictionary.header.title}`;\n\n  const [sortMethod, setSortMethod] = useState<SortMethod>('YouTube+Twitch');\n\n  const columns: Array<TableColumn<VTuberDisplayData>> = [\n    NameColumn(),\n    YouTubeTwitchCountColumn(),\n    PopularVideoColumn(),\n    GroupColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<VTuberDisplayData>>([]);\n  const [filterModel, setFilterModel] = useState<VTuberDisplayDataFilterModel>({\n    name: null,\n    YouTubeId: null,\n    TwitchId: null,\n    group: null,\n    nationality: null,\n  });\n  const filteredData = data\n    .filter((e) => filterFunction(e, filterModel))\n    .sort(SubscriberCountDescendingSort(sortMethod));\n\n  const searchBarComponent = useMemo(() => {\n    const optionValue: Array<{\n      option: h.JSX.Element;\n      value: SortMethod;\n    }> = [\n      {\n        option: (\n          <Text id=\"table.YouTubeTwitchCount\">\n            YouTube Subscribers + Twitch Followers\n          </Text>\n        ),\n        value: 'YouTube+Twitch',\n      },\n      {\n        option: (\n          <Text id=\"table.YouTubeSubscriberCount\">YouTube Subscribers</Text>\n        ),\n        value: 'YouTube',\n      },\n      {\n        option: <Text id=\"table.TwitchFollowerCount\">Twitch Followers</Text>,\n        value: 'Twitch',\n      },\n    ];\n\n    const handleFilterWindow = (\n      filterModel: VTuberDisplayDataFilterModel\n    ): void => {\n      setFilterModel(filterModel);\n    };\n\n    const fieldPlaceHolderMappings: Map<string, string> = new Map<\n      string,\n      string\n    >([\n      ['name', props.dictionary.table.searchByDisplayName],\n      ['YouTubeId', props.dictionary.table.searchByYouTubeId],\n      ['TwitchId', props.dictionary.table.searchByTwitchId],\n      ['group', props.dictionary.table.searchByGroup],\n      ['nationality', props.dictionary.table.searchByNationality],\n    ]);\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <DropDownList\n          tipText={props.dictionary.table.sortingMethod}\n          value={sortMethod}\n          optionValue={optionValue}\n          onChange={(e: any) => setSortMethod(e.target.value)}\n        />\n        <FilterWindow\n          filterModel={filterModel}\n          fieldPlaceHolderMappings={fieldPlaceHolderMappings}\n          openSearchText={props.dictionary.text.openSearch}\n          closeSearchText={props.dictionary.text.closeSearch}\n          onChange={handleFilterWindow}\n        />\n      </div>\n    );\n  }, [filterModel, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getVTubers('all').then((res) => {\n      setData(res.data.VTubers.map((e) => VTuberBasicToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.allVTubers\">All VTubers</Text>\n        {GetCurrentNationalitySpan()}\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        fixedHeader\n        pagination\n        paginationComponentOptions={props.dictionary.table.paginationOptions}\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default AllVTubersPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage\n          VTuberId={props.VTuberId}\n          imgUrl={props.imgUrl}\n          clickBehavior=\"popup\"\n        />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"tipText\":\"tipText__4DHD3\"};","import { h } from 'preact';\nimport style from './style.module.css';\nimport dropDownStyle from '../../style/DropDownStyle.module.css';\n\nexport interface DropDownListProps<ValueType> {\n  tipText?: string;\n  optionValue?: Array<{ option: any; value: ValueType }>;\n  value?: ValueType;\n  onChange?: (e: unknown) => unknown;\n}\n\nfunction DropDownList<ValueType extends string | number>(\n  props: DropDownListProps<ValueType>\n): h.JSX.Element {\n  return (\n    <div>\n      <span class={style.tipText}>{props.tipText}</span>\n      <select\n        class={dropDownStyle.dropDown}\n        value={props.value}\n        onChange={props.onChange}\n      >\n        {props.optionValue !== undefined\n          ? props.optionValue.map((e) => (\n              <option key={e.value} value={e.value}>\n                {e.option}\n              </option>\n            ))\n          : null}\n      </select>\n    </div>\n  );\n}\n\nexport default DropDownList;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","export function filterFunction<\n  TargetType extends object,\n  FilterModel extends object\n>(targetModel: TargetType, filterModel: FilterModel): boolean {\n  const result = Object.entries(filterModel).map((entry) => {\n    const keyTyped = entry[0] as keyof typeof targetModel;\n    const target = targetModel[keyTyped] as string | undefined | null;\n\n    const filter = entry[1] as string | null;\n\n    // if there is no filter applied\n    if (filter === null) {\n      return true;\n    }\n\n    // if target doesn't exist\n    if (target === null || target === undefined || target === '') {\n      return false;\n    }\n\n    return target.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  const someFilterNotMatch = result.some((e) => e === false);\n\n  return !someFilterNotMatch;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string | null;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText ?? ''}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { Fragment, h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { getNationalityModifierState } from '../global/DisplayNationality';\nimport { NationalityModifier } from '../types/Common/NationalityModifier';\n\nexport const GetCurrentNationalitySpan = (): JSX.Element | null => {\n  const nationalityModifier: NationalityModifier =\n    getNationalityModifierState();\n\n  switch (nationalityModifier) {\n    case 'TW':\n    case 'HK':\n    case 'MY':\n      return (\n        <>\n          {' '}\n          (<Text id=\"text.onlyShowing\">only showing </Text>\n          <Text id={`nationalityTitle.${nationalityModifier}`}>\n            placeholder\n          </Text>{' '}\n          VTuber)\n        </>\n      );\n    case 'all':\n    default:\n      return null;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"floating\":\"floating__uhu4Y\",\"floatingHidden\":\"floatingHidden__mvSUQ\",\"floatingShowing\":\"floatingShowing__nwzm5\"};","import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { trimOrNullOnEmpty } from '../../utils/StringUtils';\nimport SearchBar from '../SearchBar';\nimport style from './style.module.css';\n\nexport interface FilterWindowProps<FilterModel extends object> {\n  filterModel: FilterModel;\n  fieldPlaceHolderMappings: Map<string, string>;\n  openSearchText: string;\n  closeSearchText: string;\n  onChange?: (e: FilterModel) => void;\n}\n\nfunction FilterWindow<FilterModel extends object>(\n  props: FilterWindowProps<FilterModel>\n): JSX.Element {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n  const [filter, setFilter] = useState<FilterModel>(props.filterModel);\n\n  function handleOnChange(e: FilterModel): void {\n    if (props.onChange != null) {\n      props.onChange(e);\n    }\n  }\n\n  const createSearchBar = (key: string): JSX.Element => {\n    {\n      const keyTyped = key as keyof typeof filter;\n\n      const handleOnFilterChange = (e: string | null): void => {\n        const nullableString: string | null = trimOrNullOnEmpty(e);\n\n        setFilter({ ...filter, [keyTyped]: nullableString });\n        handleOnChange({ ...filter, [keyTyped]: nullableString });\n      };\n\n      return (\n        <SearchBar\n          key={key}\n          placeholderText={props.fieldPlaceHolderMappings.get(\n            keyTyped as string\n          )}\n          filterText={filter[keyTyped] as string | null}\n          onFilter={(e: any): void => handleOnFilterChange(e.target.value)}\n          onClear={(): void => handleOnFilterChange(null)}\n        />\n      );\n    }\n  };\n\n  const fields: Array<JSX.Element> = Object.keys(props.filterModel).map((key) =>\n    createSearchBar(key)\n  );\n\n  const ToggleButton = (): JSX.Element => (\n    <input\n      type=\"button\"\n      value={isOpened === true ? props.closeSearchText : props.openSearchText}\n      onClick={(): void => setIsOpened(!isOpened)}\n    />\n  );\n\n  const toggleFloatingClass = (): string => {\n    if (isOpened) return `${style.floating} ${style.floatingShowing}`;\n    else return `${style.floating} ${style.floatingHidden}`;\n  };\n\n  return (\n    <div>\n      <ToggleButton />\n      {isOpened === true ? (\n        <div class={toggleFloatingClass()}>{fields}</div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default FilterWindow;\n","export function trimOrNullOnEmpty(\n  value: string | null | undefined\n): string | null {\n  if (value === null || value === undefined) return null;\n\n  const trimmed = value.trim();\n\n  if (trimmed === '') return null;\n\n  return trimmed;\n}\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}