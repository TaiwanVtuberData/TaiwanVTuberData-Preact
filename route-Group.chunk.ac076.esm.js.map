{"version":3,"sources":["webpack:///./utils/sort/SubscriberCountSort.ts","webpack:///./tableTypes/NameColumn.tsx","webpack:///./components/YouTubeTwitchCount/style.module.css","webpack:///./components/YouTubeTwitchCount/index.tsx","webpack:///./components/ProfileImagePopup/style.module.css","webpack:///./components/ProfileImagePopup/index.tsx","webpack:///./tableTypes/YouTubeTwitchCountColumn.tsx","webpack:///./routes/Group/index.tsx","webpack:///./tableTypes/NationalityColumn.tsx","webpack:///./components/SearchBar/style.module.css","webpack:///./components/SearchBar/index.tsx","webpack:///./style/ActivityRowStyles.ts","webpack:///./utils/DefaultDataTableProps.ts","webpack:///./utils/transform/GroupMemberTransform.ts","webpack:///./utils/CountTypeUtils.ts","webpack:///./tableTypes/PopularVideoColumn.tsx","webpack:///./utils/transform/BasicTransform.ts","webpack:///./style/DataTableStyle.module.css"],"names":["YouTubeSubscriberCountDescendingSort","rowA","rowB","aExist","undefined","YouTubeSubscriber","bExist","CountTypeCompare","TwitchFollowerCountDescendingSort","TwitchFollower","YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort","aCount","GetCount","bCount","YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort","SubscriberCountDescendingSort","sortMethod","NameColumn","name","id","cell","row","VTuberId","imgUrl","YouTubeTwitchCount","props","YouTubeSpan","YouTubeCount","class","style","CountFragment","countType","TwitchSpan","TwitchCount","ProfileImagePopup","ProfileImage","YouTubeTwitchCountColumn","GroupPage","document","title","groupName","dictionary","header","columns","sortable","sortFunction","PopularVideoColumn","NationalityColumn","data","setData","useState","filterName","setFilterName","resetPaginationToggle","setResetPaginationToggle","filteredData","filter","item","toLowerCase","includes","searchBarComponent","useMemo","tableStyle","searchBarGroup","placeholderText","table","searchByDisplayName","onFilter","e","target","value","onClear","filterText","pending","setPending","useEffect","async","Api","then","res","VTubers","map","GroupMemberToDisplay","getVTubers","DefaultDataTableProps","conditionalRowStyles","ActivityRowStyles","fixedHeader","progressComponent","progressPending","subHeader","subHeaderComponent","selector","nationality","SearchBar","type","placeholder","onChange","onClick","when","activity","backgroundColor","cursor","color","VTuberBasicToDisplay","tag","count","a","b","popularVideo","YouTubeId","YouTube","subscriber","TwitchId","Twitch","follower","group"],"mappings":"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","file":"route-Group.chunk.ac076.esm.js","sourcesContent":["import { CountType } from '../../types/Common/CountType';\nimport { CountTypeCompare, GetCount } from '../CountTypeUtils';\n\nexport type SortMethod = 'YouTube+Twitch' | 'YouTube' | 'Twitch';\n\nconst YouTubeSubscriberCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.YouTubeSubscriber !== undefined;\n  const bExist: boolean = rowB.YouTubeSubscriber !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about YouTubeSubscriber might be undefined\n  if (!(rowA.YouTubeSubscriber && rowB.YouTubeSubscriber)) return 0;\n\n  return CountTypeCompare(rowA.YouTubeSubscriber, rowB.YouTubeSubscriber) * -1;\n};\n\nconst TwitchFollowerCountDescendingSort = <\n  T extends { TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aExist: boolean = rowA.TwitchFollower !== undefined;\n  const bExist: boolean = rowB.TwitchFollower !== undefined;\n\n  if (!aExist && !bExist) return 0;\n\n  if (!bExist) return -1;\n\n  if (!aExist) return 1;\n\n  // This line does nothing but to stop TypeScript from\n  // whining about TwitchFollower might be undefined\n  if (!(rowA.TwitchFollower && rowB.TwitchFollower)) return 0;\n\n  return CountTypeCompare(rowA.TwitchFollower, rowB.TwitchFollower) * -1;\n};\n\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number => {\n  const aCount =\n    (GetCount(rowA.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowA.TwitchFollower) ?? 0);\n  const bCount =\n    (GetCount(rowB.YouTubeSubscriber) ?? 0) +\n    (GetCount(rowB.TwitchFollower) ?? 0);\n\n  if (aCount > bCount) return 1;\n\n  if (bCount > aCount) return -1;\n\n  return 0;\n};\n\n// TODO: Merge the logic of descending and ascending functions\nexport const YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort = <\n  T extends { YouTubeSubscriber?: CountType; TwitchFollower?: CountType }\n>(\n  rowA: T,\n  rowB: T\n): number =>\n  YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort(rowA, rowB) * -1;\n\nexport const SubscriberCountDescendingSort = (sortMethod: SortMethod) => {\n  switch (sortMethod) {\n    case 'YouTube+Twitch':\n      return YouTubeSubscriberCountPlusTwitchFollowerCountDescendingSort;\n    case 'YouTube':\n      return YouTubeSubscriberCountDescendingSort;\n    case 'Twitch':\n      return TwitchFollowerCountDescendingSort;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ProfileImagePopup from '../components/ProfileImagePopup';\n\nexport interface NameColumnRowData {\n  id: string;\n  imgUrl?: string;\n  name: string;\n}\n\nexport const NameColumn = <\n  RowData extends NameColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.displayName\">Name</Text>,\n    cell: (row: RowData): JSX.Element => (\n      <ProfileImagePopup\n        VTuberId={row.id}\n        imgUrl={row.imgUrl}\n        name={row.name}\n      />\n    ),\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noWrap\":\"noWrap__BzT1O\",\"YouTubeRed\":\"YouTubeRed__1JOkf\",\"TwitchPurple\":\"TwitchPurple__qQQlw\"};","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { CountType } from '../../types/Common/CountType';\nimport CountFragment from '../CountFragment';\nimport style from './style.module.css';\n\nexport interface YouTubeTwitchCountProps {\n  YouTubeCount?: CountType;\n  TwitchCount?: CountType;\n}\n\nconst YouTubeTwitchCount: FunctionalComponent<YouTubeTwitchCountProps> = (\n  props: YouTubeTwitchCountProps\n): h.JSX.Element => {\n  const YouTubeSpan = (YouTubeCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.YouTubeRed}`}>\n        <CountFragment countType={YouTubeCount} />\n      </span>\n    );\n  };\n\n  const TwitchSpan = (TwitchCount: CountType): h.JSX.Element => {\n    return (\n      <span class={`${style.noWrap} ${style.TwitchPurple}`}>\n        <CountFragment countType={TwitchCount} />\n      </span>\n    );\n  };\n\n  const CountSpan = (props: YouTubeTwitchCountProps): h.JSX.Element | null => {\n    if (props.YouTubeCount && props.TwitchCount) {\n      return (\n        <>\n          {YouTubeSpan(props.YouTubeCount)}\n          {/* extra white space. will be rendered as \" + \" */}\n          <span class={style.noWrap}>&nbsp;+&nbsp;</span>\n          {TwitchSpan(props.TwitchCount)}\n        </>\n      );\n    }\n\n    if (props.YouTubeCount) {\n      return <>{YouTubeSpan(props.YouTubeCount)}</>;\n    }\n\n    if (props.TwitchCount) {\n      return <>{TwitchSpan(props.TwitchCount)}</>;\n    }\n\n    return null;\n  };\n\n  return (\n    <Fragment>\n      <CountSpan {...props} />\n    </Fragment>\n  );\n};\n\nexport default YouTubeTwitchCount;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__vr1DG\",\"profileImageFlex\":\"profileImageFlex__4VERG\",\"nameFlex\":\"nameFlex__WFOO9\"};","import { FunctionalComponent, h } from 'preact';\nimport ProfileImage from '../ProfileImage';\nimport style from './style.module.css';\n\nexport interface ProfileImagePopupProps {\n  VTuberId: string;\n  imgUrl?: string;\n  name: string;\n}\n\nconst ProfileImagePopup: FunctionalComponent<ProfileImagePopupProps> = (\n  props: ProfileImagePopupProps\n): h.JSX.Element => {\n  return (\n    <div class={style.container}>\n      <div class={style.profileImageFlex}>\n        <ProfileImage VTuberId={props.VTuberId} imgUrl={props.imgUrl} />\n      </div>\n      <span class={style.nameFlex}>{props.name}</span>\n    </div>\n  );\n};\n\nexport default ProfileImagePopup;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport YouTubeTwitchCount from '../components/YouTubeTwitchCount';\nimport { CountType } from '../types/Common/CountType';\n\nexport interface YouTubeTwitchCountColumnRowData {\n  YouTubeSubscriber?: CountType;\n  TwitchFollower?: CountType;\n}\n\nexport const YouTubeTwitchCountColumn = <\n  RowData extends YouTubeTwitchCountColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: (\n      <Text id=\"table.YouTubeTwitchCount\">\n        YouTube Subscribers + Twitch Followers\n      </Text>\n    ),\n    cell: (row: RowData): JSX.Element => (\n      <YouTubeTwitchCount\n        YouTubeCount={row.YouTubeSubscriber}\n        TwitchCount={row.TwitchFollower}\n      />\n    ),\n  };\n};\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { Text } from 'preact-i18n';\nimport DataTable, { TableColumn } from 'react-data-table-component';\nimport SearchBar from '../../components/SearchBar';\nimport { Dictionary } from '../../i18n/Dictionary';\nimport * as Api from '../../services/ApiService';\nimport { GroupMemberDisplayData } from '../../types/TableDisplayData/GroupMemberDisplayData';\nimport DefaultDataTableProps from '../../utils/DefaultDataTableProps';\nimport '../../style/index.css';\nimport tableStyle from '../../style/DataTableStyle.module.css';\nimport { YouTubeTwitchCountColumn } from '../../tableTypes/YouTubeTwitchCountColumn';\nimport { NameColumn } from '../../tableTypes/NameColumn';\nimport { PopularVideoColumn } from '../../tableTypes/PopularVideoColumn';\nimport { NationalityColumn } from '../../tableTypes/NationalityColumn';\nimport { GroupMemberToDisplay } from '../../utils/transform/GroupMemberTransform';\nimport { YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort } from '../../utils/sort/SubscriberCountSort';\nimport ActivityRowStyles from '../../style/ActivityRowStyles';\n\nexport interface GroupPageProps {\n  groupName: string;\n  dictionary: Dictionary;\n}\n\nconst GroupPage: FunctionalComponent<GroupPageProps> = (\n  props: GroupPageProps\n) => {\n  document.title = `${props.groupName} | ${props.dictionary.header.title}`;\n\n  const columns: Array<TableColumn<GroupMemberDisplayData>> = [\n    NameColumn(),\n    {\n      ...YouTubeTwitchCountColumn(),\n      sortable: true,\n      sortFunction: YouTubeSubscriberCountPlusTwitchFollowerCountAscendingSort,\n    },\n    PopularVideoColumn(),\n    NationalityColumn(),\n  ];\n\n  // search filter\n  const [data, setData] = useState<Array<GroupMemberDisplayData>>([]);\n  const [filterName, setFilterName] = useState<string>('');\n  const [resetPaginationToggle, setResetPaginationToggle] =\n    useState<boolean>(false);\n  const filteredData = data.filter(\n    (item) =>\n      item.name && item.name.toLowerCase().includes(filterName.toLowerCase())\n  );\n\n  const searchBarComponent = useMemo(() => {\n    const handleClearName = (): void => {\n      if (filterName) {\n        setResetPaginationToggle(!resetPaginationToggle);\n        setFilterName('');\n      }\n    };\n\n    return (\n      <div class={tableStyle.searchBarGroup}>\n        <SearchBar\n          placeholderText={props.dictionary.table.searchByDisplayName}\n          onFilter={(e: any): void => setFilterName(e.target.value)}\n          onClear={handleClearName}\n          filterText={filterName}\n        />\n      </div>\n    );\n  }, [filterName, resetPaginationToggle, props.dictionary]);\n\n  const [pending, setPending] = useState(true);\n\n  const getVTubers = async (): Promise<void> => {\n    await Api.getGroupVTubers(props.groupName).then((res) => {\n      setData(res.data.VTubers.map((e) => GroupMemberToDisplay(e)));\n      setPending(false);\n    });\n  };\n\n  useEffect(() => {\n    getVTubers();\n  }, []);\n\n  return (\n    <>\n      <h1>\n        <Text id=\"header.group\">Group</Text>\n        <span class=\"highlightText\"> {props.groupName} </span>\n        <Text id=\"header.memberList\">members</Text>\n      </h1>\n      <DataTable\n        {...DefaultDataTableProps}\n        columns={columns}\n        data={filteredData}\n        conditionalRowStyles={ActivityRowStyles}\n        fixedHeader\n        progressComponent={<Text id=\"text.loading\">Loading...</Text>}\n        progressPending={pending}\n        subHeader\n        subHeaderComponent={searchBarComponent}\n      />\n    </>\n  );\n};\n\nexport default GroupPage;\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\n\nexport interface NationalityColumnRowData {\n  nationality?: string;\n}\n\nexport const NationalityColumn = <\n  RowData extends NationalityColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.nationality\">Nationality</Text>,\n    selector: (row: RowData): string => row.nationality ?? '',\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__1lsi6\",\"textField\":\"textField__bDpXR\",\"button\":\"button__maFzS\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.module.css';\n\nexport interface SearchBarProps {\n  placeholderText?: string;\n  filterText: string;\n  onFilter: (e: unknown) => unknown;\n  onClear: () => unknown;\n}\n\nconst SearchBar: FunctionalComponent<SearchBarProps> = (\n  props: SearchBarProps\n): h.JSX.Element => (\n  <div class={style.container}>\n    <input\n      type=\"text\"\n      class={style.textField}\n      placeholder={props.placeholderText}\n      value={props.filterText}\n      onChange={props.onFilter}\n    />\n\n    <button type=\"button\" class={style.button} onClick={props.onClear}>\n      X\n    </button>\n  </div>\n);\n\nexport default SearchBar;\n","import { Activity } from '../types/Common/Activity';\n\nconst ActivityRowStyles = [\n  {\n    when: (row: { activity: Activity }): boolean =>\n      row.activity === 'preparing',\n    style: {\n      backgroundColor: 'rgba(141, 209, 157, 0.9)',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  {\n    when: (row: { activity: Activity }): boolean => row.activity === 'graduate',\n    style: {\n      backgroundColor: 'rgba(123, 123, 123, 0.9)',\n      color: 'white',\n      '&:hover': {\n        cursor: 'not-allowed',\n      },\n    },\n  },\n];\n\nexport default ActivityRowStyles;\n","import { TableProps } from 'react-data-table-component';\nimport ActivityRowStyles from '../style/ActivityRowStyles';\nimport { Activity } from '../types/Common/Activity';\n\n// columns and data are empty, user should fill them when using DefaultDataTableProps\nconst DefaultDataTableProps = <\n  T extends { activity: Activity }\n>(): TableProps<T> => ({\n  columns: [],\n  data: [],\n  conditionalRowStyles: ActivityRowStyles,\n});\n\nexport default DefaultDataTableProps;\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { GroupMemberDisplayData } from '../../types/TableDisplayData/GroupMemberDisplayData';\nimport { VTuberBasicToDisplay } from './BasicTransform';\n\nexport const GroupMemberToDisplay = (\n  e: VTuberData\n): GroupMemberDisplayData => ({\n  ...VTuberBasicToDisplay(e),\n});\n","import { CountType } from '../types/Common/CountType';\n\nexport const GetCount = (countType?: CountType): number | null => {\n  if (countType === undefined) return null;\n\n  switch (countType.tag) {\n    case 'has':\n      return countType.count;\n    case 'hidden':\n    case 'no':\n      return null;\n  }\n};\n\n// Sort order: no < hidden < 100 < 300\nexport const CountTypeCompare = (a: CountType, b: CountType): number => {\n  switch (a.tag) {\n    case 'has':\n      {\n        switch (b.tag) {\n          case 'has':\n            return a.count - b.count;\n          case 'hidden':\n            return 1;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'hidden':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return 0;\n          case 'no':\n            return 1;\n        }\n      }\n      break;\n\n    case 'no':\n      {\n        switch (b.tag) {\n          case 'has':\n            return -1;\n          case 'hidden':\n            return -1;\n          case 'no':\n            return 0;\n        }\n      }\n      break;\n  }\n};\n","import { h } from 'preact';\nimport { Text } from 'preact-i18n';\nimport { TableColumn } from 'react-data-table-component';\nimport ShowVideoButton from '../components/ShowVideoButton';\nimport { VideoInfo } from '../types/Common/VideoInfo';\n\nexport interface PopularVideoColumnRowData {\n  popularVideo?: VideoInfo;\n}\n\nexport const PopularVideoColumn = <\n  RowData extends PopularVideoColumnRowData\n>(): TableColumn<RowData> => {\n  return {\n    name: <Text id=\"table.popularVideo\">Popular Video</Text>,\n    cell: (row: RowData): JSX.Element | null =>\n      row.popularVideo !== undefined ? (\n        <ShowVideoButton popularVideo={row.popularVideo} />\n      ) : null,\n  };\n};\n","import { VTuberData } from '../../types/ApiData/VTuberData';\nimport { VTuberDisplayData } from '../../types/TableDisplayData/VTuberDisplayData';\n\nexport const VTuberBasicToDisplay = (e: VTuberData): VTuberDisplayData => ({\n  id: e.id,\n  activity: e.activity,\n  name: e.name,\n  imgUrl: e.imgUrl,\n  YouTubeId: e.YouTube?.id,\n  YouTubeSubscriber: e.YouTube?.subscriber,\n  TwitchId: e.Twitch?.id,\n  TwitchFollower: e.Twitch?.follower,\n  popularVideo: e.popularVideo,\n  group: e.group,\n  nationality: e.nationality,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"groupLink\":\"x4dKXRdnDI9qgFfe4BsDUQ==\",\"searchBarGroup\":\"R1T8+hwxvBovrVdGHizUFw==\"};"],"sourceRoot":""}